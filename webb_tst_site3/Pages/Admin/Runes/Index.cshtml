@page
@model webb_tst_site3.Pages.Admin.Runes.IndexModel
@{
    ViewData["Title"] = "Список рун";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@ViewData["Title"]</h1>
        <a asp-page="Create" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Добавить руну
        </a>
    </div>

    @if (Model.Runes.Any())
    {
        <div class="mb-4">
            <button id="saveOrderBtn" class="btn btn-success mb-3">
                <i class="fas fa-save me-2"></i>Сохранить порядок
            </button>
            <div class="row" id="runesRow">
                @foreach (var rune in Model.Runes)
                {
                    <div class="col-md-4 mb-4 draggable-card" draggable="true" data-rune-id="@rune.Id">
                        <div class="card shadow-sm h-100">
                            <div class="card-img-top text-center p-3 bg-light">
                                <img src="@(rune.ImageUrl ?? "/images/default-rune.png")" class="img-fluid" style="max-height: 120px;" onerror="this.onerror=null;this.src='/images/default-rune.png'">
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@rune.Name</h5>
                                <p class="card-text text-muted small">@rune.BaseDescription?.Substring(0, Math.Min(rune.BaseDescription.Length, 100))</p>
                                @if (rune.SphereDescriptions.Any())
                                {
                                    <div class="mt-2">
                                        <h6 class="text-primary small">Описания по сферам:</h6>
                                        <ul class="list-unstyled small">
                                            @foreach (var desc in rune.SphereDescriptions)
                                            {
                                                <li>
                                                    <span class="fw-bold">@desc.Sphere.Name:</span>
                                                    <span>@desc.Description?.Substring(0, Math.Min(desc.Description.Length, 50))</span>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                            <div class="card-footer bg-white d-flex justify-content-between">
                                <a asp-page="Edit" asp-route-id="@rune.Id" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-edit"></i> Изменить
                                </a>
                                <form method="post" asp-page-handler="Delete" asp-route-id="@rune.Id">
                                    <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Удалить эту руну?')">
                                        <i class="fas fa-trash"></i> Удалить
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">Нет доступных рун. Создайте первую руну.</div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const row = document.getElementById('runesRow');
            let draggedCard = null;
            let originalOrder = [];

            function arraysEqual(a, b) {
                return Array.isArray(a) &&
                    Array.isArray(b) &&
                    a.length === b.length &&
                    a.every((val, index) => val === b[index]);
            }

            function initializeOriginalOrder() {
                originalOrder = Array.from(row.children).map(card => parseInt(card.dataset.runeId));
            }
            initializeOriginalOrder();

            row.addEventListener('dragstart', e => {
                if (e.target.classList.contains('draggable-card')) {
                    draggedCard = e.target;
                    e.target.classList.add('ghost');
                    e.dataTransfer.effectAllowed = 'move';
                    e.dataTransfer.setData('text/html', e.target.innerHTML);
                }
            });

            row.addEventListener('dragend', e => {
                if (e.target.classList.contains('draggable-card')) {
                    e.target.classList.remove('ghost');
                    e.target.style.opacity = '1';
                    draggedCard = null;
                    checkOrderChanged();
                }
            });

            row.addEventListener('dragover', e => {
                e.preventDefault();
                if (!draggedCard) return;

                const afterElement = getDragAfterElement(row, e.clientY);
                if (afterElement == null) {
                    row.appendChild(draggedCard);
                } else {
                    row.insertBefore(draggedCard, afterElement);
                }
            });

            function getDragAfterElement(container, y) {
                const draggableElements = [...container.querySelectorAll('.draggable-card:not(.ghost)')];
                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;
                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }

            function checkOrderChanged() {
                const currentOrder = Array.from(row.children).map(card => parseInt(card.dataset.runeId));
                const isChanged = !arraysEqual(originalOrder, currentOrder);
                document.getElementById('saveOrderBtn').style.display = isChanged ? 'block' : 'none';
            }

            document.getElementById('saveOrderBtn').addEventListener('click', async () => {
                const runeIds = Array.from(row.children).map(card => parseInt(card.dataset.runeId));
                try {
                    const response = await fetch('/api/runes/order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(runeIds)
                    });
                    if (response.ok) {
                        initializeOriginalOrder();
                        document.getElementById('saveOrderBtn').style.display = 'none';
                    }
                } catch (err) {
                    alert('Ошибка при сохранении порядка');
                }
            });
        });
    </script>
}