// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Controllers\AdminQuizzesController.cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Controllers
{
    [Authorize(Roles = "Admin")]
    public class AdminQuizzesController : Controller
    {
        private readonly AppDbContext _context;

        public AdminQuizzesController(AppDbContext context)
        {
            _context = context;
        }

        // GET: Список всех квизов
        public async Task<IActionResult> Index()
        {
            return View(await _context.Quizzes.ToListAsync());
        }

        // GET: Форма создания
        public IActionResult Create()
        {
            return View();
        }

        // POST: Сохранение нового квиза
        [HttpPost]
        public async Task<IActionResult> Create(Quiz quiz)
        {
            _context.Add(quiz);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Edit), new { id = quiz.Id });
        }

        // GET: Редактирование
        public async Task<IActionResult> Edit(int? id)
        {
            var quiz = await _context.Quizzes
                .Include(q => q.Questions)
                .Include(q => q.Results)
                .FirstOrDefaultAsync(q => q.Id == id);
            return View(quiz);
        }

        // API: Обновление порядка вопросов
        [HttpPost]
        public async Task<IActionResult> UpdateQuestionOrder([FromBody] List<OrderItem> items)
        {
            foreach (var item in items)
            {
                var question = await _context.Questions.FindAsync(item.Id);
                question.Order = item.Order;
            }
            await _context.SaveChangesAsync();
            return Ok();
        }

        public class OrderItem { public int Id { get; set; } public int Order { get; set; } }
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Controllers\QuizController .cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using System.Linq;
using System.Threading.Tasks;

namespace webb_tst_site3.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class QuizController : ControllerBase
    {
        private readonly AppDbContext _context;

        public QuizController(AppDbContext context)
        {
            _context = context;
        }

        // Квизы
        [HttpGet("quizzes")]
        public async Task<IActionResult> GetAllQuizzes()
        {
            var quizzes = await _context.Quizzes.ToListAsync();
            return Ok(quizzes);
        }

        [HttpGet("quizzes/{id}")]
        public async Task<IActionResult> GetQuiz(int id)
        {
            var quiz = await _context.Quizzes.FindAsync(id);
            if (quiz == null) return NotFound();
            return Ok(quiz);
        }

        [HttpPost("quizzes")]
        public async Task<IActionResult> CreateQuiz([FromBody] Quiz quiz)
        {
            _context.Quizzes.Add(quiz);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetQuiz), new { id = quiz.Id }, quiz);
        }

        [HttpPut("quizzes/{id}")]
        public async Task<IActionResult> UpdateQuiz(int id, [FromBody] Quiz quiz)
        {
            if (id != quiz.Id) return BadRequest();
            _context.Entry(quiz).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        [HttpDelete("quizzes/{id}")]
        public async Task<IActionResult> DeleteQuiz(int id)
        {
            var quiz = await _context.Quizzes.FindAsync(id);
            if (quiz == null) return NotFound();
            _context.Quizzes.Remove(quiz);
            await _context.SaveChangesAsync();
            return NoContent();
        }

        // Вопросы
        [HttpGet("quizzes/{quizId}/questions")]
        public async Task<IActionResult> GetQuestions(int quizId)
        {
            var questions = await _context.Questions
                .Where(q => q.QuizId == quizId)
                .ToListAsync();
            return Ok(questions);
        }

        [HttpPost("quizzes/{quizId}/questions")]
        public async Task<IActionResult> AddQuestion(int quizId, [FromBody] Question question)
        {
            question.QuizId = quizId;
            _context.Questions.Add(question);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetQuestions), new { quizId }, question);
        }

        // Ответы
        [HttpGet("questions/{questionId}/answers")]
        public async Task<IActionResult> GetAnswers(int questionId)
        {
            var answers = await _context.Answers
                .Where(a => a.QuestionId == questionId)
                .Include(a => a.Result)
                .ToListAsync();
            return Ok(answers);
        }

        [HttpPost("questions/{questionId}/answers")]
        public async Task<IActionResult> AddAnswer(int questionId, [FromBody] Answer answer)
        {
            answer.QuestionId = questionId;
            _context.Answers.Add(answer);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetAnswers), new { questionId }, answer);
        }

        // Результаты
        [HttpGet("quizzes/{quizId}/results")]
        public async Task<IActionResult> GetResults(int quizId)
        {
            var results = await _context.Results
                .Where(r => r.QuizId == quizId)
                .ToListAsync();
            return Ok(results);
        }

        [HttpPost("quizzes/{quizId}/results")]
        public async Task<IActionResult> AddResult(int quizId, [FromBody] Result result)
        {
            result.QuizId = quizId;
            _context.Results.Add(result);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetResults), new { quizId }, result);
        }

        // Прохождение квиза
        [HttpPost("quizzes/{quizId}/submit")]
        public async Task<IActionResult> SubmitQuiz(int quizId, [FromBody] QuizSubmission submission)
        {
            // Сохраняем ответы пользователя
            foreach (var answer in submission.Answers)
            {
                _context.UserQuizAnswers.Add(new UserQuizAnswer
                {
                    UserId = submission.UserId,
                    QuizId = quizId,
                    QuestionId = answer.QuestionId,
                    AnswerId = answer.AnswerId
                });
            }

            await _context.SaveChangesAsync();

            // Определяем результат
            var result = await CalculateResult(quizId, submission.UserId);
            return Ok(result);
        }

        private async Task<Result> CalculateResult(int quizId, string userId)
        {
            var userAnswers = await _context.UserQuizAnswers
                .Include(uqa => uqa.Answer)
                .Where(uqa => uqa.QuizId == quizId && uqa.UserId == userId)
                .ToListAsync();

            var resultScores = userAnswers
                .GroupBy(uqa => uqa.Answer.ResultId)
                .ToDictionary(g => g.Key, g => g.Sum(x => x.Answer.Score));

            var winningResultId = resultScores.OrderByDescending(x => x.Value).First().Key;
            return await _context.Results.FindAsync(winningResultId);
        }
    }

    public class QuizSubmission
    {
        public string UserId { get; set; }
        public List<QuestionAnswer> Answers { get; set; }
    }

    public class QuestionAnswer
    {
        public int QuestionId { get; set; }
        public int AnswerId { get; set; }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Controllers\RunesController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RunesController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly Random _random = new();

        public RunesController(AppDbContext context)
        {
            _context = context;
        }

        [HttpGet("random")]
        public async Task<IActionResult> GetRandomRune([FromQuery] int? sphereId = null)
        {
            var query = _context.Runes
                .Include(r => r.SphereDescriptions)
                .ThenInclude(sd => sd.Sphere)
                .AsQueryable();

            if (sphereId.HasValue)
            {
                query = query.Where(r => r.SphereDescriptions.Any(sd => sd.SphereId == sphereId.Value));
            }

            var runes = await query.ToListAsync();
            if (!runes.Any()) return NotFound();

            var rune = runes[_random.Next(runes.Count)];
            var description = rune.BaseDescription;
            var sphereName = "";

            if (sphereId.HasValue)
            {
                var sphereDesc = rune.SphereDescriptions.FirstOrDefault(sd => sd.SphereId == sphereId.Value);
                description = sphereDesc?.Description ?? description;
                sphereName = sphereDesc?.Sphere?.Name ?? "";
            }

            return Ok(new
            {
                name = rune.Name,
                imageUrl = string.IsNullOrEmpty(rune.ImageUrl) ? "/images/default-rune.png" : rune.ImageUrl,
                description,
                sphereName
            });
        }

        [HttpPost("order")]
        public async Task<IActionResult> UpdateOrder([FromBody] List<int> runeIds)
        {
            try
            {
                var runes = await _context.Runes.ToListAsync();
                for (int i = 0; i < runeIds.Count; i++)
                {
                    var rune = runes.First(r => r.Id == runeIds[i]);
                    rune.Order = i; // Добавьте поле Order в модель Rune
                }

                await _context.SaveChangesAsync();
                return Ok();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Data\AppDbContext.cs
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Models;

namespace webb_tst_site3.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {
        }

        public DbSet<User> Users { get; set; }
        public DbSet<Sphere> Spheres { get; set; }
        public DbSet<Rune> Runes { get; set; }
        public DbSet<RuneSphereDescription> RuneSphereDescriptions { get; set; }
        public DbSet<Quiz> Quizzes { get; set; }
        public DbSet<Question> Questions { get; set; }
        public DbSet<Answer> Answers { get; set; }
        public DbSet<Result> Results { get; set; }
        public DbSet<UserQuizAnswer> UserQuizAnswers { get; set; }
        public DbSet<Feedback> Feedback { get; set; }
        public DbSet<SettingGroup> SettingGroups { get; set; }
        public DbSet<SiteSetting> SiteSettings { get; set; }
        public DbSet<SettingHistory> SettingHistory { get; set; }
        public DbSet<Article> Articles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Настройка связей для RuneSphereDescription
            modelBuilder.Entity<RuneSphereDescription>()
                .HasOne(rsd => rsd.Rune)
                .WithMany(r => r.SphereDescriptions)
                .HasForeignKey(rsd => rsd.RuneId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<RuneSphereDescription>()
                .HasOne(rsd => rsd.Sphere)
                .WithMany(s => s.RuneDescriptions)
                .HasForeignKey(rsd => rsd.SphereId)
                .OnDelete(DeleteBehavior.Cascade);

            // Настройка связей для Quiz
            modelBuilder.Entity<Quiz>()
                .HasMany(q => q.Questions)
                .WithOne(q => q.Quiz)
                .HasForeignKey(q => q.QuizId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Quiz>()
                .HasMany(q => q.Results)
                .WithOne(r => r.Quiz)
                .HasForeignKey(r => r.QuizId)
                .OnDelete(DeleteBehavior.Cascade);

            // Настройка связей для Question
            modelBuilder.Entity<Question>()
                .HasMany(q => q.Answers)
                .WithOne(a => a.Question)
                .HasForeignKey(a => a.QuestionId)
                .OnDelete(DeleteBehavior.Cascade);

            // Настройка связей для Answer
            modelBuilder.Entity<Answer>()
                .HasOne(a => a.Result)
                .WithMany()
                .HasForeignKey(a => a.ResultId)
                .OnDelete(DeleteBehavior.Restrict);

            // Настройка связей для UserQuizAnswer
            modelBuilder.Entity<UserQuizAnswer>()
                .HasOne(uqa => uqa.Quiz)
                .WithMany()
                .HasForeignKey(uqa => uqa.QuizId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<UserQuizAnswer>()
                .HasOne(uqa => uqa.Question)
                .WithMany()
                .HasForeignKey(uqa => uqa.QuestionId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<UserQuizAnswer>()
                .HasOne(uqa => uqa.Answer)
                .WithMany()
                .HasForeignKey(uqa => uqa.AnswerId)
                .OnDelete(DeleteBehavior.Restrict);

            // Настройка необязательных полей
            modelBuilder.Entity<Result>()
                .Property(r => r.ImageUrl)
                .IsRequired(false);

            // Уникальные индексы для улучшения производительности
            modelBuilder.Entity<User>()
                .HasIndex(u => u.Username)
                .IsUnique();

            modelBuilder.Entity<RuneSphereDescription>()
                .HasIndex(rsd => new { rsd.RuneId, rsd.SphereId })
                .IsUnique();

            modelBuilder.Entity<Result>(entity =>
            {
                entity.HasOne(r => r.Quiz)
                    .WithMany(q => q.Results)
                    .HasForeignKey(r => r.QuizId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.Property(r => r.ImageUrl).IsRequired(false);
                entity.Navigation(r => r.Quiz).AutoInclude(false); // Отключаем автоматическую загрузку
            });

            modelBuilder.Entity<Answer>()
            .HasOne(a => a.Question)
            .WithMany(q => q.Answers)
            .HasForeignKey(a => a.QuestionId);

            modelBuilder.Entity<Answer>()
                .HasOne(a => a.Result)
                .WithMany()
                .HasForeignKey(a => a.ResultId);

            modelBuilder.Entity<Article>()
        .HasOne(a => a.Parent)
        .WithMany(a => a.Children)
        .HasForeignKey(a => a.ParentId)
        .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Article>()
                .Property(a => a.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP");

            modelBuilder.Entity<Article>()
                .Property(a => a.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .ValueGeneratedOnAddOrUpdate();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Extensions\StringExtensions.cs
// StringExtensions.cs
namespace webb_tst_site3.Extensions
{
    public static class StringExtensions
    {
        public static string Truncate(this string value, int maxLength)
        {
            if (string.IsNullOrEmpty(value))
                return value;

            return value.Length <= maxLength ? value : value.Substring(0, maxLength) + "...";
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Filters\SettingsViewDataFilter.cs
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Services;

namespace webb_tst_site3.Filters
{
    public class SettingsViewDataFilter : IAsyncActionFilter
    {
        private readonly SettingsService _settingsService;

        public SettingsViewDataFilter(SettingsService settingsService)
        {
            _settingsService = settingsService;
        }

        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            var settings = await _settingsService.GetPublicSettingsAsync();
            var controller = context.Controller as PageModel;

            if (controller != null)
            {
                foreach (var setting in settings)
                {
                    controller.ViewData[setting.Key] = setting.Value;
                }

                // Убедимся, что SiteName всегда установлен
                if (!controller.ViewData.ContainsKey("SiteName"))
                {
                    controller.ViewData["SiteName"] = await _settingsService.GetSiteNameAsync();
                }
            }

            await next();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Answer.cs
namespace webb_tst_site3.Models
{
    public class Answer
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public int Score { get; set; } = 1;
        public int QuestionId { get; set; }
        public Question Question { get; set; }
        public int ResultId { get; set; }
        public Result Result { get; set; }
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Article.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace webb_tst_site3.Models
{
    public class Article
    {
        public int Id { get; set; }

        [Required]
        [StringLength(255)]
        public string Title { get; set; }

        public string Description { get; set; }

        [Required]
        [StringLength(255)]
        public string Url { get; set; }

        public string ImageUrl { get; set; }

        [NotMapped]
        public IFormFile ImageFile { get; set; }

        [StringLength(500)]
        public string Hashtags { get; set; }

        public int? ParentId { get; set; }
        public Article Parent { get; set; }

        public List<Article> Children { get; set; } = new();

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        // Метод для получения списка хэштегов
        public List<string> GetHashtagsList()
        {
            if (string.IsNullOrWhiteSpace(Hashtags))
                return new List<string>();

            return Hashtags.Split(new[] { '#', ' ', ',' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(t => t.Trim())
                          .Where(t => !string.IsNullOrEmpty(t))
                          .Distinct()
                          .ToList();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Feedback.cs
namespace webb_tst_site3.Models
{
    public class Feedback
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Message { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Question.cs
namespace webb_tst_site3.Models
{
    public class Question
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public int Order { get; set; }
        public int QuizId { get; set; }
        public Quiz Quiz { get; set; }
        public List<Answer> Answers { get; set; } = new();
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Quiz.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace webb_tst_site3.Models
{
    public class Quiz
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Название обязательно")]
        public string Title { get; set; }

        public string? Description { get; set; }
        public string? ImageUrl { get; set; }
        public bool IsPublished { get; set; } = true;

        public List<Question> Questions { get; set; } = new();
        public List<Result> Results { get; set; } = new();

        [NotMapped]
        public IFormFile? ImageFile { get; set; }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Result.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace webb_tst_site3.Models
{
    public class Result
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Название обязательно")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Описание обязательно")]
        public string Description { get; set; }

        public string? ImageUrl { get; set; }
        public int QuizId { get; set; }
        public Quiz? Quiz { get; set; }

        [NotMapped]
        public IFormFile? ImageFile { get; set; }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Rune.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace webb_tst_site3.Models
{
    public class Rune
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Название руны обязательно")]
        [StringLength(100, ErrorMessage = "Название не должно превышать 100 символов")]
        public string Name { get; set; }

        // Сделаем описание необязательным
        public string? BaseDescription { get; set; }

        // Сделаем изображение необязательным
        public string? ImageUrl { get; set; }

        [NotMapped]
        public IFormFile ImageFile { get; set; }

        public int Order { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        public virtual ICollection<RuneSphereDescription> SphereDescriptions { get; set; } = new List<RuneSphereDescription>();
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\RuneSphereDescription.cs
using System.ComponentModel.DataAnnotations;

namespace webb_tst_site3.Models
{
    public class RuneSphereDescription
    {
        public int Id { get; set; }
        public int RuneId { get; set; }
        public Rune Rune { get; set; }
        public int SphereId { get; set; }
        public webb_tst_site3.Models.Sphere Sphere { get; set; }
        public string Description { get; set; } = string.Empty; // Значение по умолчанию
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\SettingGroup.cs
using System.ComponentModel.DataAnnotations;

namespace webb_tst_site3.Models
{
    public class SettingGroup
    {
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        public string? Description { get; set; }

        public int Order { get; set; } = 0;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public ICollection<SiteSetting> Settings { get; set; } = new List<SiteSetting>();
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\SettingHistory.cs
namespace webb_tst_site3.Models
{
    public class SettingHistory
    {
        public int Id { get; set; }

        public int SettingId { get; set; }
        public SiteSetting Setting { get; set; }

        public string? OldValue { get; set; }
        public string? NewValue { get; set; }

        public string ChangedByUserId { get; set; }
        public User ChangedByUser { get; set; } // Изменили здесь

        public DateTime ChangedAt { get; set; } = DateTime.UtcNow;
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\SiteSetting.cs
using System.ComponentModel.DataAnnotations;

namespace webb_tst_site3.Models
{
    public class SiteSetting
    {
        public int Id { get; set; }

        public int? GroupId { get; set; }
        public SettingGroup? Group { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [Required]
        [StringLength(100)]
        public string DisplayName { get; set; }

        public string? Value { get; set; }

        public string? DefaultValue { get; set; }

        [Required]
        public string DataType { get; set; } // "string", "number", "boolean", "color", "image", "text", "html", "json"

        public string? Description { get; set; }

        public bool IsPublic { get; set; } = true;

        public bool Editable { get; set; } = true;

        public int Order { get; set; } = 0;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public DateTime? UpdatedAt { get; set; }

        public ICollection<SettingHistory> History { get; set; } = new List<SettingHistory>();
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\Sphere.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace webb_tst_site3.Models
{
    public class Sphere
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Название сферы обязательно")]
        [StringLength(100, ErrorMessage = "Название не должно превышать 100 символов")]
        public string Name { get; set; }

        // Сделаем описание необязательным
        public string? Description { get; set; }

        // Сделаем изображение необязательным
        public string? ImageUrl { get; set; }

        [NotMapped]
        public IFormFile ImageFile { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        public virtual ICollection<RuneSphereDescription> RuneDescriptions { get; set; } = new List<RuneSphereDescription>();
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\User.cs
using System.ComponentModel.DataAnnotations;

namespace webb_tst_site3.Models
{
    public class User
    {
        public int Id { get; set; }

        [Required]
        [StringLength(50)]
        public string Username { get; set; }

        [Required]
        public string PasswordHash { get; set; }

        [Required]
        public string Role { get; set; } = "User";

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Models\UserQuizAnswer.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace webb_tst_site3.Models
{
    public class UserQuizAnswer
    {
        public int Id { get; set; }

        [Required]
        public string UserId { get; set; }  // Связь с пользователем

        [Required]
        public int QuizId { get; set; }

        [Required]
        public int QuestionId { get; set; }

        [Required]
        public int AnswerId { get; set; }

        public DateTime AnsweredAt { get; set; } = DateTime.UtcNow;

        // Навигационные свойства
        public Quiz Quiz { get; set; }
        public Question Question { get; set; }
        public Answer Answer { get; set; }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Debug\net8.0\webb_tst_site3.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Identity.UI.UIFrameworkAttribute("Bootstrap5")]
[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("f054cec5-5dec-4638-b88c-9e1faf5f55d1")]
[assembly: System.Reflection.AssemblyCompanyAttribute("webb_tst_site3")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+72173a8dcb8091ca52bdcccf5dace07ce603c450")]
[assembly: System.Reflection.AssemblyProductAttribute("webb_tst_site3")]
[assembly: System.Reflection.AssemblyTitleAttribute("webb_tst_site3")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.




// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Debug\net8.0\webb_tst_site3.GlobalUsings.g.cs
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Debug\net8.0\webb_tst_site3.MvcApplicationPartsAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.Identity.UI")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.




// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Debug\net8.0\webb_tst_site3.RazorAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFact" +
    "ory, Microsoft.AspNetCore.Mvc.Razor")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.




// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Release\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Release\net8.0\webb_tst_site3.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Identity.UI.UIFrameworkAttribute("Bootstrap5")]
[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("f054cec5-5dec-4638-b88c-9e1faf5f55d1")]
[assembly: System.Reflection.AssemblyCompanyAttribute("webb_tst_site3")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+2c5f818d4086ef87b2051a44036fa0b3e485957b")]
[assembly: System.Reflection.AssemblyProductAttribute("webb_tst_site3")]
[assembly: System.Reflection.AssemblyTitleAttribute("webb_tst_site3")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.




// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Release\net8.0\webb_tst_site3.GlobalUsings.g.cs
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Release\net8.0\webb_tst_site3.MvcApplicationPartsAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.Identity.UI")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.




// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\obj\Release\net8.0\webb_tst_site3.RazorAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Р­С‚РѕС‚ РєРѕРґ СЃРѕР·РґР°РЅ РїСЂРѕРіСЂР°РјРјРѕР№.
//     РСЃРїРѕР»РЅСЏРµРјР°СЏ РІРµСЂСЃРёСЏ:4.0.30319.42000
//
//     РР·РјРµРЅРµРЅРёСЏ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ РјРѕРіСѓС‚ РїСЂРёРІРµСЃС‚Рё Рє РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ СЂР°Р±РѕС‚Рµ Рё Р±СѓРґСѓС‚ РїРѕС‚РµСЂСЏРЅС‹ РІ СЃР»СѓС‡Р°Рµ
//     РїРѕРІС‚РѕСЂРЅРѕР№ РіРµРЅРµСЂР°С†РёРё РєРѕРґР°.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFact" +
    "ory, Microsoft.AspNetCore.Mvc.Razor")]

// РЎРѕР·РґР°РЅРѕ РєР»Р°СЃСЃРѕРј WriteCodeFragment MSBuild.




// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Create.cshtml
@page
@model webb_tst_site3.Pages.Admin.Articles.CreateModel
@{
    ViewData["Title"] = "Добавить статью";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>

    <form method="post" enctype="multipart/form-data">
        <div class="form-group mb-3">
            <label asp-for="Article.Title"></label>
            <input asp-for="Article.Title" class="form-control" />
            <span asp-validation-for="Article.Title" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Article.Description"></label>
            <textarea asp-for="Article.Description" class="form-control" rows="3"></textarea>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Article.Url"></label>
            <input asp-for="Article.Url" class="form-control" />
            <span asp-validation-for="Article.Url" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Article.Hashtags"></label>
            <input asp-for="Article.Hashtags" class="form-control" placeholder="#пример #теги" />
        </div>

        <div class="form-group mb-3">
            <label>Изображение</label>
            <input asp-for="Article.ImageFile" type="file" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="Index" class="btn btn-secondary">Отмена</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Create.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace webb_tst_site3.Pages.Admin.Articles
{
    public class CreateModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IWebHostEnvironment _environment;

        [BindProperty]
        public Article Article { get; set; }

        public CreateModel(AppDbContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }

        public IActionResult OnGet()
        {
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            if (Article.ImageFile != null && Article.ImageFile.Length > 0)
            {
                var uploadsFolder = Path.Combine(_environment.WebRootPath, "uploads/articles");
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                var fileName = Guid.NewGuid().ToString() + Path.GetExtension(Article.ImageFile.FileName);
                var filePath = Path.Combine(uploadsFolder, fileName);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await Article.ImageFile.CopyToAsync(stream);
                }

                Article.ImageUrl = "/uploads/articles/" + fileName;
            }

            _context.Articles.Add(Article);
            await _context.SaveChangesAsync();

            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Delete.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Articles.DeleteModel
@{
    ViewData["Title"] = "Удалить статью";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>
    <h3>Вы уверены, что хотите удалить эту статью?</h3>

    <div class="card mb-4">
        <div class="card-body">
            <h4>@Model.Article.Title</h4>
            <p>@Model.Article.Description</p>
            @if (!string.IsNullOrEmpty(Model.Article.ImageUrl))
            {
                <img src="@Model.Article.ImageUrl" class="img-thumbnail" style="max-height: 200px;" />
            }
        </div>
    </div>

    <form method="post">
        <input type="hidden" asp-for="Article.Id" />
        <input type="hidden" asp-for="Article.ImageUrl" />
        <button type="submit" class="btn btn-danger">Удалить</button>
        <a asp-page="Index" class="btn btn-secondary">Отмена</a>
    </form>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Delete.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace webb_tst_site3.Pages.Admin.Articles
{
    public class DeleteModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IWebHostEnvironment _environment;

        public DeleteModel(AppDbContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }

        [BindProperty]
        public Article Article { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Article = await _context.Articles.FindAsync(id);

            if (Article == null)
            {
                return NotFound();
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var article = await _context.Articles.FindAsync(Article.Id);
            if (article == null)
            {
                return NotFound();
            }

            // Удаляем изображение
            if (!string.IsNullOrEmpty(article.ImageUrl))
            {
                var filePath = Path.Combine(_environment.WebRootPath, article.ImageUrl.TrimStart('/'));
                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                }
            }

            _context.Articles.Remove(article);
            await _context.SaveChangesAsync();

            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Edit.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Articles.EditModel
@{
    ViewData["Title"] = "Редактировать статью";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>

    <form method="post" enctype="multipart/form-data">
        <input type="hidden" asp-for="Article.Id" />

        <div class="form-group mb-3">
            <label asp-for="Article.Title"></label>
            <input asp-for="Article.Title" class="form-control" />
            <span asp-validation-for="Article.Title" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Article.Description"></label>
            <textarea asp-for="Article.Description" class="form-control" rows="3"></textarea>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Article.Url"></label>
            <input asp-for="Article.Url" class="form-control" />
            <span asp-validation-for="Article.Url" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Article.Hashtags"></label>
            <input asp-for="Article.Hashtags" class="form-control" placeholder="#пример #теги" />
        </div>

        <div class="form-group mb-3">
            <label>Текущее изображение</label>
            @if (!string.IsNullOrEmpty(Model.Article.ImageUrl))
            {
                <img src="@Model.Article.ImageUrl" class="img-thumbnail mb-2" style="max-height: 200px; display: block;" />
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="deleteImage" name="deleteImage" value="true">
                    <label class="form-check-label" for="deleteImage">
                        Удалить текущее изображение
                    </label>
                </div>
            }
            <input asp-for="Article.ImageFile" type="file" class="form-control mt-2" />
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="Index" class="btn btn-secondary">Отмена</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace webb_tst_site3.Pages.Admin.Articles
{
    public class EditModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IWebHostEnvironment _environment;

        [BindProperty]
        public Article Article { get; set; }

        [BindProperty]
        public bool DeleteImage { get; set; }

        public EditModel(AppDbContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Article = await _context.Articles.FindAsync(id);

            if (Article == null)
            {
                return NotFound();
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var existingArticle = await _context.Articles.FindAsync(Article.Id);
            if (existingArticle == null)
            {
                return NotFound();
            }

            existingArticle.Title = Article.Title;
            existingArticle.Description = Article.Description;
            existingArticle.Url = Article.Url;
            existingArticle.Hashtags = Article.Hashtags;
            existingArticle.UpdatedAt = DateTime.UtcNow;

            // Обработка изображения
            if (DeleteImage && !string.IsNullOrEmpty(existingArticle.ImageUrl))
            {
                var filePath = Path.Combine(_environment.WebRootPath, existingArticle.ImageUrl.TrimStart('/'));
                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                }
                existingArticle.ImageUrl = null;
            }

            if (Article.ImageFile != null && Article.ImageFile.Length > 0)
            {
                // Удаляем старое изображение
                if (!string.IsNullOrEmpty(existingArticle.ImageUrl))
                {
                    var oldFilePath = Path.Combine(_environment.WebRootPath, existingArticle.ImageUrl.TrimStart('/'));
                    if (System.IO.File.Exists(oldFilePath))
                    {
                        System.IO.File.Delete(oldFilePath);
                    }
                }

                // Сохраняем новое изображение
                var uploadsFolder = Path.Combine(_environment.WebRootPath, "uploads/articles");
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                var fileName = Guid.NewGuid().ToString() + Path.GetExtension(Article.ImageFile.FileName);
                var filePath = Path.Combine(uploadsFolder, fileName);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await Article.ImageFile.CopyToAsync(stream);
                }

                existingArticle.ImageUrl = "/uploads/articles/" + fileName;
            }

            await _context.SaveChangesAsync();
            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Index.cshtml
@page
@model webb_tst_site3.Pages.Admin.Articles.IndexModel
@{
    ViewData["Title"] = "Статьи";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@ViewData["Title"]</h1>
        <a asp-page="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Добавить статью
        </a>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Название</th>
                <th>Ссылка</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in Model.Articles)
            {
                <tr>
                    <td>@article.Title</td>
                    <td>
                        <a href="@article.Url" target="_blank">@article.Url</a>
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@article.Id" class="btn btn-sm btn-warning">
                            <i class="fas fa-edit"></i>
                        </a>
                        <a asp-page="./Delete" asp-route-id="@article.Id" class="btn btn-sm btn-danger">
                            <i class="fas fa-trash"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Articles\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin.Articles
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public IList<Article> Articles { get; set; }

        public async Task OnGetAsync()
        {
            Articles = await _context.Articles
                .Where(a => a.ParentId == null)
                .Include(a => a.Children)
                .ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Create.cshtml
@page "{questionId:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers.CreateModel
@{
    ViewData["Title"] = "Добавить ответ";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <p>Для вопроса: @Model.Question.Text</p>

    <form method="post">
        <input type="hidden" asp-for="Answer.QuestionId" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label asp-for="Answer.Text" class="form-label"></label>
            <input asp-for="Answer.Text" class="form-control" required />
            <span asp-validation-for="Answer.Text" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Answer.Score" class="form-label"></label>
            <input asp-for="Answer.Score" class="form-control" type="number" min="1" value="1" required />
        </div>

        <div class="form-group mb-3">
            <label asp-for="Answer.ResultId" class="form-label"></label>
            <select asp-for="Answer.ResultId" class="form-control" required
                    asp-items="Model.Results">
                <option value="">-- Выберите результат --</option>
            </select>
            <span asp-validation-for="Answer.ResultId" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="./Index"
           asp-route-questionId="@Model.Answer.QuestionId"
           class="btn btn-secondary">
            Отмена
        </a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Create.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers
{
    public class CreateModel : PageModel
    {
        private readonly AppDbContext _context;

        public CreateModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Answer Answer { get; set; }
        public Question Question { get; set; }
        public SelectList Results { get; set; }
        public int QuizId { get; set; }

        public async Task<IActionResult> OnGetAsync(int questionId)
        {
            Question = await _context.Questions
                .Include(q => q.Quiz)
                .FirstOrDefaultAsync(q => q.Id == questionId);

            if (Question == null)
            {
                return NotFound();
            }

            QuizId = Question.QuizId;
            Answer = new Answer { QuestionId = questionId };

            Results = new SelectList(
                await _context.Results
                    .Where(r => r.QuizId == QuizId)
                    .ToListAsync(),
                "Id", "Name");

            return Page();
        }
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid && Answer == null)
            {
                Question = await _context.Questions
                    .Include(q => q.Quiz)
                    .FirstOrDefaultAsync(q => q.Id == Answer.QuestionId);

                Results = new SelectList(
                    await _context.Results
                        .Where(r => r.QuizId == Question.QuizId)
                        .ToListAsync(),
                    "Id", "Name");

                return Page();
            }

            _context.Answers.Add(Answer);
            await _context.SaveChangesAsync();

            // Редирект на страницу ответов конкретного вопроса
            return RedirectToPage("./Index", new { questionId = Answer.QuestionId });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Delete.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers.DeleteModel
@{
    ViewData["Title"] = "Удалить ответ";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <h3>Вы уверены, что хотите удалить этот ответ?</h3>

    <div class="card mb-4">
        <div class="card-body">
            <h4>@Model.Answer.Text</h4>
            <p>Баллы: @Model.Answer.Score</p>
            <p>Результат: @Model.Answer.Result?.Name</p>
        </div>
    </div>

    <form method="post">
        <input type="hidden" asp-for="Answer.Id" />
        <input type="hidden" asp-for="QuizId" />
        <button type="submit" class="btn btn-danger">Удалить</button>
        <a asp-page="./Index" asp-route-questionId="@Model.Answer.QuestionId"
           class="btn btn-secondary">Отмена</a>
    </form>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Delete.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers
{
    public class DeleteModel : PageModel
    {
        private readonly AppDbContext _context;

        public DeleteModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Answer Answer { get; set; }
        public int QuizId { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Answer = await _context.Answers
                .Include(a => a.Result)
                .Include(a => a.Question)
                .ThenInclude(q => q.Quiz)
                .FirstOrDefaultAsync(a => a.Id == id);

            if (Answer == null)
            {
                return NotFound();
            }

            QuizId = Answer.Question.QuizId;
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var answer = await _context.Answers.FindAsync(Answer.Id);
            if (answer != null)
            {
                _context.Answers.Remove(answer);
                await _context.SaveChangesAsync();
            }

            return RedirectToPage("../Index", new { quizId = QuizId });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Edit.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers.EditModel
@{
    ViewData["Title"] = "Редактировать ответ";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <form method="post">
        <input type="hidden" asp-for="Answer.Id" />
        <input type="hidden" asp-for="Answer.QuestionId" />
        <input type="hidden" asp-for="QuizId" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label asp-for="Answer.Text" class="form-label"></label>
            <input asp-for="Answer.Text" class="form-control" required />
            <span asp-validation-for="Answer.Text" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Answer.Score" class="form-label"></label>
            <input asp-for="Answer.Score" class="form-control" type="number" min="1" required />
        </div>

        <div class="form-group mb-3">
            <label asp-for="Answer.ResultId" class="form-label"></label>
            <select asp-for="Answer.ResultId" class="form-control" required
                    asp-items="Model.Results">
            </select>
            <span asp-validation-for="Answer.ResultId" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="./Index"
           asp-route-questionId="@Model.Answer.QuestionId"
           class="btn btn-secondary">
            Отмена
        </a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers
{
    public class EditModel : PageModel
    {
        private readonly AppDbContext _context;

        public EditModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Answer Answer { get; set; }
        public SelectList Results { get; set; }
        public int QuizId { get; set; }
        public int QuestionId { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Answer = await _context.Answers
                .Include(a => a.Question)
                .ThenInclude(q => q.Quiz)
                .FirstOrDefaultAsync(a => a.Id == id);

            if (Answer == null)
            {
                return NotFound();
            }

            QuizId = Answer.Question.QuizId;
            QuestionId = Answer.QuestionId;

            Results = new SelectList(
                await _context.Results
                    .Where(r => r.QuizId == QuizId)
                    .ToListAsync(),
                "Id", "Name");

            return Page();
        }
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid && Answer == null)
            {
                // Перезагружаем данные для формы
                QuizId = (await _context.Answers
                    .Include(a => a.Question)
                    .FirstOrDefaultAsync(a => a.Id == Answer.Id))?
                    .Question?.QuizId ?? 0;

                Results = new SelectList(
                    await _context.Results
                        .Where(r => r.QuizId == QuizId)
                        .ToListAsync(),
                    "Id", "Name");

                return Page();
            }

            _context.Attach(Answer).State = EntityState.Modified;
            await _context.SaveChangesAsync();

            // Редирект на страницу ответов конкретного вопроса
            return RedirectToPage("./Index", new { questionId = Answer.QuestionId });
        }

        private bool AnswerExists(int id)
        {
            return _context.Answers.Any(e => e.Id == id);
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Index.cshtml
@page "{questionId:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers.IndexModel
@{
    ViewData["Title"] = Model.QuestionId.HasValue 
        ? $"Ответы на вопрос" 
        : $"Все ответы квиза";
}

<div class="container">
    @if (Model.Quiz == null)
    {
        <div class="alert alert-danger">Квиз не найден</div>
        return;
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>@ViewData["Title"]: @Model.Quiz.Title</h2>
        <div>
            @if (Model.QuestionId.HasValue)
            {
                <a asp-page="../Index" asp-route-quizId="@Model.QuizId" class="btn btn-secondary">
                    ← Назад к вопросам
                </a>
            }
            else
            {
                <a asp-page="../Index" asp-route-quizId="@Model.QuizId" class="btn btn-secondary">
                    ← Назад к квизу
                </a>
            }
            <a asp-page="./Create" asp-route-quizId="@Model.QuizId" asp-route-questionId="@Model.QuestionId" 
               class="btn btn-success ml-2">
                Добавить ответ
            </a>
        </div>
    </div>

    @if (Model.QuestionId.HasValue && Model.Question != null)
    {
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Вопрос: @Model.Question.Text</h5>
            </div>
        </div>
    }

    @if (Model.Answers?.Any() ?? false)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Текст ответа</th>
                    <th>Баллы</th>
                    <th>Результат</th>
                    @if (!Model.QuestionId.HasValue)
                    {
                        <th>Вопрос</th>
                    }
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var answer in Model.Answers)
                {
                    <tr>
                        <td>@answer.Text</td>
                        <td>@answer.Score</td>
                        <td>@answer.Result?.Name</td>
                        @if (!Model.QuestionId.HasValue)
                        {
                            <td>
                                <a asp-page="./Index" asp-route-quizId="@Model.QuizId" asp-route-questionId="@answer.QuestionId">
                                    @answer.Question?.Text
                                </a>
                            </td>
                        }
                        <td>
                            <a asp-page="./Edit" asp-route-id="@answer.Id" class="btn btn-sm btn-warning">Редактировать</a>
                            <a asp-page="./Delete" asp-route-id="@answer.Id" class="btn btn-sm btn-danger">Удалить</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info">Ответы не найдены</div>
    }
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Answers\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions.Answers
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        [FromRoute]
        public int QuizId { get; set; }

        [FromRoute]
        public int? QuestionId { get; set; }

        public Models. Quiz Quiz { get; set; }
        public Question Question { get; set; }
        public List<Answer> Answers { get; set; }
        public async Task OnGetAsync(int questionId)
        {
            Question = await _context.Questions
                .Include(q => q.Quiz)
                .FirstOrDefaultAsync(q => q.Id == questionId);

            if (Question == null)
            {
                return;
            }

            Quiz = Question.Quiz;
            Answers = await _context.Answers
                .Include(a => a.Result)
                .Where(a => a.QuestionId == questionId)
                .ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Create.cshtml
@page "{quizId:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.CreateModel
@{
    ViewData["Title"] = "Добавить вопрос";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <form method="post">
        <input type="hidden" asp-for="Question.QuizId" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label asp-for="Question.Text" class="form-label"></label>
            <textarea asp-for="Question.Text" class="form-control" rows="3" required></textarea>
            <span asp-validation-for="Question.Text" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Question.Order" class="form-label"></label>
            <input asp-for="Question.Order" class="form-control" type="number" min="0" />
            <small class="text-muted">Оставьте 0 для автоматической нумерации</small>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="./Index" asp-route-quizId="@Model.Question.QuizId"
           class="btn btn-secondary">Отмена</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Create.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions
{
    public class CreateModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly ILogger<CreateModel> _logger;

        public CreateModel(AppDbContext context, ILogger<CreateModel> logger)
        {
            _context = context;
            _logger = logger;
        }

        [BindProperty]
        public Question Question { get; set; }

        public async Task<IActionResult> OnGetAsync(int quizId)
        {
            // Проверяем существование квиза
            var quizExists = await _context.Quizzes.AnyAsync(q => q.Id == quizId);
            if (!quizExists)
            {
                return NotFound();
            }

            Question = new Question { QuizId = quizId };
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            try
            {
                // Проверяем существование квиза
                var quizExists = await _context.Quizzes.AnyAsync(q => q.Id == Question.QuizId);
                if (!quizExists)
                {
                    ModelState.AddModelError("", "Указанный квиз не существует");
                    return Page();
                }

                // Автоматическая нумерация
                if (Question.Order == 0)
                {
                    var maxOrder = await _context.Questions
                        .Where(q => q.QuizId == Question.QuizId)
                        .MaxAsync(q => (int?)q.Order) ?? 0;
                    Question.Order = maxOrder + 1;
                }

                _context.Questions.Add(Question);
                await _context.SaveChangesAsync();

                return RedirectToPage("./Index", new { quizId = Question.QuizId });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Ошибка при создании вопроса");
                ModelState.AddModelError("", "Ошибка при сохранении вопроса");
                return Page();
            }
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Delete.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.DeleteModel
@{
    ViewData["Title"] = "Удалить вопрос";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <h3>Вы уверены, что хотите удалить этот вопрос?</h3>

    <div class="card mb-4">
        <div class="card-body">
            <h4>@Model.Question.Text</h4>
            <p>Порядок: @Model.Question.Order</p>
            <p class="text-danger">Все связанные ответы также будут удалены!</p>
        </div>
    </div>

    <form method="post">
        <input type="hidden" asp-for="Question.Id" />
        <input type="hidden" asp-for="Question.QuizId" />
        <button type="submit" class="btn btn-danger">Удалить</button>
        <a asp-page="./Index" asp-route-quizId="@Model.Question.QuizId"
           class="btn btn-secondary">Отмена</a>
    </form>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Delete.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions
{
    public class DeleteModel : PageModel
    {
        private readonly AppDbContext _context;

        public DeleteModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Question Question { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Question = await _context.Questions
                .Include(q => q.Quiz)
                .FirstOrDefaultAsync(q => q.Id == id);

            if (Question == null)
            {
                return NotFound();
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var question = await _context.Questions
                .Include(q => q.Answers)
                .FirstOrDefaultAsync(q => q.Id == Question.Id);

            if (question != null)
            {
                _context.Questions.Remove(question);
                await _context.SaveChangesAsync();
            }

            return RedirectToPage("./Index", new { quizId = Question.QuizId });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Edit.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.EditModel
@{
    ViewData["Title"] = "Редактировать вопрос";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <form method="post">
        <input type="hidden" asp-for="Question.Id" />
        <input type="hidden" asp-for="Question.QuizId" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label asp-for="Question.Text" class="form-label"></label>
            <textarea asp-for="Question.Text" class="form-control" rows="3" required></textarea>
            <span asp-validation-for="Question.Text" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Question.Order" class="form-label"></label>
            <input asp-for="Question.Order" class="form-control" type="number" min="1" required />
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="./Index" asp-route-quizId="@Model.Question.QuizId"
           class="btn btn-secondary">Отмена</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions
{
    public class EditModel : PageModel
    {
        private readonly AppDbContext _context;

        public EditModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Question Question { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Question = await _context.Questions.FindAsync(id);

            if (Question == null)
            {
                return NotFound();
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            _context.Attach(Question).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!QuestionExists(Question.Id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return RedirectToPage("./Index", new { quizId = Question.QuizId });
        }

        private bool QuestionExists(int id)
        {
            return _context.Questions.Any(e => e.Id == id);
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Index.cshtml
@page "{quizId:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Questions.IndexModel
@{
    ViewData["Title"] = "Вопросы квиза";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Вопросы для: @Model.Quiz.Title</h2>
        <div>
            <a asp-page="/Admin/Quizzes/Results/Index"
               asp-route-quizId="@Model.Quiz.Id"
               class="btn btn-info me-2">
                <i class="fas fa-star"></i> Управление результатами
            </a>
            <a asp-page="./Create"
               asp-route-quizId="@Model.Quiz.Id"
               class="btn btn-primary">
                <i class="fas fa-plus"></i> Добавить вопрос
            </a>
        </div>
    </div>

    <div class="mb-3">
        <a asp-page="/Admin/Quizzes/Index" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Назад к списку квизов
        </a>
    </div>

    @if (Model.Questions.Any())
    {
        <table class="table table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Текст вопроса</th>
                    <th>Порядок</th>
                    <th>Кол-во ответов</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in Model.Questions.OrderBy(q => q.Order))
                {
                    <tr>
                        <td>@question.Text</td>
                        <td>@question.Order</td>
                        <td>@(question.Answers?.Count ?? 0)</td>
                        <td>
                            <a asp-page="./Edit"
                               asp-route-id="@question.Id"
                               class="btn btn-sm btn-warning"
                               title="Редактировать">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a asp-page="./Delete"
                               asp-route-id="@question.Id"
                               class="btn btn-sm btn-danger"
                               title="Удалить">
                                <i class="fas fa-trash"></i>
                            </a>
                            <a asp-page="./Answers/Index"
                               asp-route-quizId="@Model.Quiz.Id"
                               asp-route-questionId="@question.Id"
                               class="btn btn-sm btn-info"
                               title="Ответы">
                                <i class="fas fa-list"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info">
            В этом квизе пока нет вопросов. Нажмите "Добавить вопрос" чтобы создать первый.
        </div>
    }
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Questions\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

namespace webb_tst_site3.Pages.Admin.Quizzes.Questions
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty(SupportsGet = true)]
        public int QuizId { get; set; }

        public Models.Quiz Quiz { get; set; }
        public IList<Question> Questions { get; set; }

        public async Task<IActionResult> OnGetAsync()
        {
            // Загружаем квиз с вопросами
            Quiz = await _context.Quizzes
                .Include(q => q.Questions)
                .ThenInclude(q => q.Answers)
                .FirstOrDefaultAsync(q => q.Id == QuizId);

            if (Quiz == null)
            {
                return NotFound();
            }

            Questions = Quiz.Questions.OrderBy(q => q.Order).ToList();
            return Page();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Create.cshtml
@page "{quizId:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Results.CreateModel
@{
    ViewData["Title"] = "Добавить результат";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <h4>Для квиза: @Model.Quiz.Title</h4>

    <form method="post">
        <!-- Скрытое поле для QuizId -->
        <input type="hidden" asp-for="Result.QuizId" />

        <div asp-validation-summary="All" class="text-danger"></div>

        <div class="form-group mb-3">
            <label asp-for="Result.Name" class="form-label">Название*</label>
            <input asp-for="Result.Name" class="form-control" />
            <span asp-validation-for="Result.Name" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Result.Description" class="form-label">Описание*</label>
            <textarea asp-for="Result.Description" class="form-control" rows="5"></textarea>
            <span asp-validation-for="Result.Description" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Result.ImageUrl" class="form-label">Ссылка на изображение</label>
            <input asp-for="Result.ImageUrl" class="form-control" type="url"
                   placeholder="https://example.com/image.jpg" />
            <small class="text-muted">Необязательное поле</small>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="./Index" asp-route-quizId="@Model.Quiz.Id" class="btn btn-secondary">Отмена</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
} 


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Create.cshtml.cs
// Pages/Admin/Quizzes/Results/Create.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes.Results
{
    public class CreateModel : PageModel
    {
        private readonly AppDbContext _context;

        [BindProperty]
        public Result Result { get; set; } = new();

        public Models.Quiz Quiz { get; set; }

        public CreateModel(AppDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> OnGetAsync(int quizId)
        {
            Quiz = await _context.Quizzes.FindAsync(quizId);
            if (Quiz == null) return NotFound();

            Result.QuizId = quizId;
            return Page();
        }

        public async Task<IActionResult> OnPostAsync(int quizId)
        {
            Quiz = await _context.Quizzes.FindAsync(quizId);
            if (Quiz == null) return NotFound();

            Result.QuizId = quizId;

            // Удаляем ошибки валидации для Quiz, если они есть
            ModelState.Remove("Result.Quiz");

            if (string.IsNullOrWhiteSpace(Result.Name))
                ModelState.AddModelError("Result.Name", "Название обязательно");

            if (string.IsNullOrWhiteSpace(Result.Description))
                ModelState.AddModelError("Result.Description", "Описание обязательно");

            if (!ModelState.IsValid)
            {
                return Page();
            }

            Result.ImageUrl = string.IsNullOrWhiteSpace(Result.ImageUrl) ? null : Result.ImageUrl;

            _context.Results.Add(Result);
            await _context.SaveChangesAsync();

            return RedirectToPage("./Index", new { quizId });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Delete.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Results.DeleteModel
@{
    ViewData["Title"] = "Удаление результата";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <h3>Вы уверены, что хотите удалить этот результат?</h3>
    <hr />

    <div class="card mb-4">
        <div class="card-body">
            <h4 class="card-title">@Model.Result.Name</h4>
            <p class="card-text">@Model.Result.Description</p>
            @if (!string.IsNullOrEmpty(Model.Result.ImageUrl))
            {
                <img src="@Model.Result.ImageUrl" style="max-height: 150px;" class="img-thumbnail" />
            }
            <p class="text-danger mt-3">
                <i class="fas fa-exclamation-triangle"></i> Это действие нельзя отменить!
            </p>
        </div>
    </div>

    <form method="post">
        <input type="hidden" asp-for="Result.Id" />
        <input type="hidden" asp-for="Result.QuizId" />
        <input type="hidden" asp-for="Result.ImageUrl" />

        <button type="submit" class="btn btn-danger">
            <i class="fas fa-trash"></i> Удалить
        </button>
        <a asp-page="./Index" asp-route-quizId="@Model.Result.QuizId" class="btn btn-secondary">
            <i class="fas fa-times"></i> Отмена
        </a>
    </form>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Delete.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace webb_tst_site3.Pages.Admin.Quizzes.Results
{
    public class DeleteModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IWebHostEnvironment _environment;

        public DeleteModel(AppDbContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }

        [BindProperty]
        public Result Result { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Result = await _context.Results.FindAsync(id);

            if (Result == null)
            {
                return NotFound();
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync(int id)
        {
            Result = await _context.Results.FindAsync(id);

            if (Result != null)
            {
                // Удаляем изображение
                if (!string.IsNullOrEmpty(Result.ImageUrl))
                {
                    var filePath = Path.Combine(_environment.WebRootPath, Result.ImageUrl.TrimStart('/'));
                    if (System.IO.File.Exists(filePath))
                    {
                        System.IO.File.Delete(filePath);
                    }
                }

                _context.Results.Remove(Result);
                await _context.SaveChangesAsync();
            }

            return RedirectToPage("./Index", new { quizId = Result.QuizId });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Edit.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Results.EditModel
@{
    ViewData["Title"] = "Редактирование результата";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <h4>Квиз: @Model.Quiz.Title</h4>
    <hr />

    <form method="post">
        <input type="hidden" asp-for="Result.Id" />
        <input type="hidden" asp-for="Result.QuizId" />

        <div class="form-group mb-3">
            <label asp-for="Result.Name" class="form-label">Название*</label>
            <input asp-for="Result.Name" class="form-control" required />
            <span asp-validation-for="Result.Name" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Result.Description" class="form-label">Описание*</label>
            <textarea asp-for="Result.Description" class="form-control" rows="5" required></textarea>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Result.ImageUrl" class="form-label">Ссылка на изображение</label>
            <input asp-for="Result.ImageUrl" class="form-control" type="url" placeholder="https://example.com/image.jpg" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Сохранить
            </button>
            <a asp-page="./Index" asp-route-quizId="@Model.Result.QuizId" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Назад
            </a>
        </div>
    </form>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Edit.cshtml.cs
// Pages/Admin/Quizzes/Results/Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace webb_tst_site3.Pages.Admin.Quizzes.Results
{
    public class EditModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IWebHostEnvironment _environment;

        [BindProperty]
        public Result Result { get; set; }

        [BindProperty]
        public IFormFile? ImageFile { get; set; }

        [BindProperty]
        public bool DeleteImage { get; set; }

        public Models.Quiz Quiz { get; set; }

        public EditModel(AppDbContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Result = await _context.Results
                .Include(r => r.Quiz)
                .FirstOrDefaultAsync(r => r.Id == id);

            if (Result == null) return NotFound();

            Quiz = Result.Quiz;
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            // Удаляем ошибки валидации для Quiz
            ModelState.Remove("Result.Quiz");

            if (string.IsNullOrWhiteSpace(Result.Name))
                ModelState.AddModelError("Result.Name", "Название обязательно");

            if (string.IsNullOrWhiteSpace(Result.Description))
                ModelState.AddModelError("Result.Description", "Описание обязательно");

            if (!ModelState.IsValid)
            {
                Quiz = await _context.Quizzes.FindAsync(Result.QuizId);
                return Page();
            }

            // Обработка изображения
            if (DeleteImage && !string.IsNullOrEmpty(Result.ImageUrl))
            {
                var filePath = Path.Combine(_environment.WebRootPath, Result.ImageUrl.TrimStart('/'));
                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                }
                Result.ImageUrl = null;
            }

            if (ImageFile != null && ImageFile.Length > 0)
            {
                // Удаляем старое изображение
                if (!string.IsNullOrEmpty(Result.ImageUrl))
                {
                    var oldFilePath = Path.Combine(_environment.WebRootPath, Result.ImageUrl.TrimStart('/'));
                    if (System.IO.File.Exists(oldFilePath))
                    {
                        System.IO.File.Delete(oldFilePath);
                    }
                }

                // Сохраняем новое изображение
                var uploadsFolder = Path.Combine(_environment.WebRootPath, "images/results");
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                var uniqueFileName = Guid.NewGuid().ToString() + "_" + ImageFile.FileName;
                var filePath = Path.Combine(uploadsFolder, uniqueFileName);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await ImageFile.CopyToAsync(stream);
                }

                Result.ImageUrl = "/images/results/" + uniqueFileName;
            }

            _context.Attach(Result).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ResultExists(Result.Id))
                {
                    return NotFound();
                }
                throw;
            }

            return RedirectToPage("./Index", new { quizId = Result.QuizId });
        }

        private bool ResultExists(int id)
        {
            return _context.Results.Any(e => e.Id == id);
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Index.cshtml
@page "{quizId:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.Results.IndexModel
@{
    ViewData["Title"] = "Управление результатами";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>@ViewData["Title"]</h2>
        <a asp-page="../Index" class="btn btn-outline-secondary">
            ← Назад к квизам
        </a>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Квиз: @Model.Quiz.Title</h5>
        </div>
    </div>

    <a asp-page="./Create" asp-route-quizId="@Model.Quiz.Id" class="btn btn-success mb-3">
        <i class="fas fa-plus"></i> Добавить результат
    </a>

    @if (Model.Results.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Название</th>
                        <th>Описание</th>
                        <th>Изображение</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in Model.Results)
                    {
                        <tr>
                            <td>@result.Name</td>
                            <td>@result.Description</td>
                            <td>
                                @if (!string.IsNullOrEmpty(result.ImageUrl))
                                {
                                    <img src="@result.ImageUrl" style="max-height: 50px;" class="img-thumbnail" />
                                }
                                else
                                {
                                    <span class="text-muted">Нет изображения</span>
                                }
                            </td>
                            <td>
                                <a asp-page="./Edit" asp-route-id="@result.Id" class="btn btn-sm btn-warning">
                                    <i class="fas fa-edit"></i> Изменить
                                </a>
                                <a asp-page="./Delete" asp-route-id="@result.Id" class="btn btn-sm btn-danger">
                                    <i class="fas fa-trash"></i> Удалить
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> Нет добавленных результатов
        </div>
    }
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Results\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace webb_tst_site3.Pages.Admin.Quizzes.Results
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public Models.Quiz Quiz { get; set; }
        public List<Models.Result> Results { get; set; }

        public async Task OnGetAsync(int quizId)
        {
            Quiz = await _context.Quizzes.FindAsync(quizId);
            Results = await _context.Results
                .Where(r => r.QuizId == quizId)
                .OrderBy(r => r.Name)
                .ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Create.cshtml
@page
@model webb_tst_site3.Pages.Admin.Quizzes.CreateModel
@{
    ViewData["Title"] = "Создать квиз";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label asp-for="Quiz.Title" class="form-label"></label>
            <input asp-for="Quiz.Title" class="form-control" required />
            <span asp-validation-for="Quiz.Title" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Quiz.Description" class="form-label"></label>
            <textarea asp-for="Quiz.Description" class="form-control" rows="3"></textarea>
        </div>

        <div class="form-group form-check mb-3">
            <input asp-for="Quiz.IsPublished" class="form-check-input" />
            <label asp-for="Quiz.IsPublished" class="form-check-label"></label>
        </div>
        <div class="form-group mb-3">
            <label>Изображение квиза</label>
            <input asp-for="Quiz.ImageFile" type="file" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Создать</button>
        <a asp-page="./Index" class="btn btn-secondary">Отмена</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Create.cshtml.cs
// Pages/Admin/Quizzes/Create.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes
{
    public class CreateModel : PageModel
    {
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly AppDbContext _context;

        [BindProperty]
        public Models.Quiz Quiz { get; set; }

        public CreateModel(AppDbContext context, IWebHostEnvironment webHostEnvironment)
        {
            _context = context;
            _webHostEnvironment = webHostEnvironment;
        }

        public IActionResult OnGet()
        {
            return Page();
        }
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            if (Quiz.ImageFile != null && Quiz.ImageFile.Length > 0)
            {
                var uploadsFolder = Path.Combine(_webHostEnvironment.WebRootPath, "uploads/quizzes");
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                var fileName = Guid.NewGuid().ToString() + Path.GetExtension(Quiz.ImageFile.FileName);
                var filePath = Path.Combine(uploadsFolder, fileName);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await Quiz.ImageFile.CopyToAsync(stream);
                }

                Quiz.ImageUrl = "/uploads/quizzes/" + fileName;
            }

            _context.Quizzes.Add(Quiz);
            await _context.SaveChangesAsync();

            return RedirectToPage("./Questions/Index", new { quizId = Quiz.Id });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Delete.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.DeleteModel
@{
    ViewData["Title"] = "Удалить квиз";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <h3>Вы уверены, что хотите удалить этот квиз?</h3>

    <div class="card mb-4">
        <div class="card-body">
            <h4>@Model.Quiz.Title</h4>
            <p>@Model.Quiz.Description</p>
            <p class="text-danger">Все связанные вопросы и ответы также будут удалены!</p>
        </div>
    </div>

    <form method="post">
        <input type="hidden" asp-for="Quiz.Id" />
        <button type="submit" class="btn btn-danger">Удалить</button>
        <a asp-page="./Index" class="btn btn-secondary">Отмена</a>
    </form>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Delete.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes
{
    public class DeleteModel : PageModel
    {
        private readonly AppDbContext _context;

        public DeleteModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Models.Quiz Quiz { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Quiz = await _context.Quizzes
                .Include(q => q.Questions)
                .ThenInclude(q => q.Answers)
                .FirstOrDefaultAsync(q => q.Id == id);

            if (Quiz == null)
            {
                return NotFound();
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync(int id)
        {
            var quiz = await _context.Quizzes
                .Include(q => q.Questions)
                .ThenInclude(q => q.Answers)
                .FirstOrDefaultAsync(q => q.Id == id);

            if (quiz != null)
            {
                _context.Quizzes.Remove(quiz);
                await _context.SaveChangesAsync();
            }

            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Edit.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Quizzes.EditModel
@{
    ViewData["Title"] = "Редактировать квиз";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <form method="post">
        <input type="hidden" asp-for="Quiz.Id" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label asp-for="Quiz.Title" class="form-label"></label>
            <input asp-for="Quiz.Title" class="form-control" required />
            <span asp-validation-for="Quiz.Title" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Quiz.Description" class="form-label"></label>
            <textarea asp-for="Quiz.Description" class="form-control" rows="3"></textarea>
        </div>

        <div class="form-group form-check mb-3">
            <input asp-for="Quiz.IsPublished" class="form-check-input" />
            <label asp-for="Quiz.IsPublished" class="form-check-label"></label>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a asp-page="./Index" class="btn btn-secondary">Отмена</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes
{
    public class EditModel : PageModel
    {
        private readonly AppDbContext _context;

        public EditModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Models.Quiz Quiz { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Quiz = await _context.Quizzes.FindAsync(id);

            if (Quiz == null)
            {
                return NotFound();
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            _context.Attach(Quiz).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!QuizExists(Quiz.Id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return RedirectToPage("./Index");
        }

        private bool QuizExists(int id)
        {
            return _context.Quizzes.Any(e => e.Id == id);
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Index.cshtml
@page
@model webb_tst_site3.Pages.Admin.Quizzes.IndexModel
@{
    ViewData["Title"] = "Управление квизами";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <a asp-page="Create" class="btn btn-primary mb-3">Создать квиз</a>
    <div class="mb-3">
        <a asp-page="/Admin/Index" class="btn btn-outline-secondary">
            ← Назад в главное меню
        </a>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Статус</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quiz in Model.Quizzes)
            {
                <tr>
                    <td>@quiz.Title</td>
                    <td>@(quiz.IsPublished ? "Опубликован" : "Черновик")</td>
                    <td>
                        <div class="btn-group" role="group">
                            <a asp-page="/Admin/Quizzes/Results/Index"
                               asp-route-quizId="@quiz.Id"
                               class="btn btn-info btn-sm">
                                <i class="fas fa-star"></i> Результаты
                            </a>
                            <a asp-page="/Admin/Quizzes/Questions/Index"
                               asp-route-quizId="@quiz.Id"
                               class="btn btn-secondary btn-sm">
                                <i class="fas fa-question"></i> Вопросы
                            </a>
                            <a asp-page="/Admin/Quizzes/Edit"
                               asp-route-id="@quiz.Id"
                               class="btn btn-primary btn-sm">
                                <i class="fas fa-edit"></i> Ред.
                            </a>
                            <a asp-page="/Admin/Quizzes/Delete"
                               asp-route-id="@quiz.Id"
                               class="btn btn-danger btn-sm">
                                <i class="fas fa-trash"></i> Удл.
                            </a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin.Quizzes
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public IList<Models.Quiz> Quizzes { get; set; }

        public async Task OnGetAsync()
        {
            Quizzes = await _context.Quizzes.ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\_QuizForm.cshtml
@model webb_tst_site3.Models.Quiz

<form method="post">

    <div class="form-group">
        <label asp-for="Title"></label>
        <input asp-for="Title" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
    </div>
</form>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Quizzes\_QuizForm.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace webb_tst_site3.Pages.Admin.Quizzes
{
    public class _QuizFormModel : PageModel
    {
        public void OnGet()
        {
        }
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Runes\Create.cshtml
@page
@model webb_tst_site3.Pages.Admin.Runes.CreateModel
@{
    ViewData["Title"] = "Добавление новой руны";
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>

    <div class="row">
        <div class="col-md-8">
            <form method="post" class="mt-4">
                <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                <!-- Основная информация о руне -->
                <div class="card mb-4 shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Основная информация</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="Rune.Name" class="form-label">Название руны *</label>
                            <input asp-for="Rune.Name" class="form-control" required />
                            <span asp-validation-for="Rune.Name" class="text-danger"></span>
                        </div>

                        <!-- Измените поле BaseDescription, убрав required -->
                        <div class="mb-3">
                            <label asp-for="Rune.BaseDescription" class="form-label">Основное описание</label>
                            <textarea asp-for="Rune.BaseDescription" class="form-control" rows="4"></textarea>
                            <span asp-validation-for="Rune.BaseDescription" class="text-danger"></span>
                        </div>

                        <!-- Оставьте ImageUrl без изменений (уже необязательное) -->
                        <div class="form-group">
                            <label>Изображение</label>
                            <input asp-for="Rune.ImageFile" type="file" class="form-control" />
                        </div>
                    </div>
                </div>

                <!-- Описания для каждой сферы -->
                <div class="card mb-4 shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Описания по сферам</h5>
                    </div>
                    <div class="card-body">
                        @if (Model.AllSpheres.Any())
                        {
                            @foreach (var sphere in Model.AllSpheres)
                            {
                                <div class="mb-4 p-3 border rounded">
                                    <h6 class="mb-3 text-primary">@sphere.Name</h6>

                                    @if (sphere.Description != null && !string.IsNullOrEmpty(sphere.Description))
                                    {
                                        <p class="text-muted small mb-3">@sphere.Description</p>
                                    }

                                    <div class="form-group">
                                        <label for="SphereDescriptions_@sphere.Id" class="form-label">Описание для этой сферы:</label>
                                        <textarea name="SphereDescriptions[@sphere.Id]"
                                                  id="SphereDescriptions_@sphere.Id"
                                                  class="form-control"
                                                  rows="3">@(Model.SphereDescriptions.ContainsKey(sphere.Id) ? Model.SphereDescriptions[sphere.Id] : "")</textarea>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Нет доступных сфер. Сначала создайте сферы.
                            </div>
                        }
                    </div>
                </div>

                <!-- Кнопки действий -->
                <div class="d-flex justify-content-between">
                    <a asp-page="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-2"></i> Назад к списку
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i> Создать руну
                    </button>
                </div>
            </form>
        </div>

        <!-- Подсказки -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Подсказки</h5>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled">
                        <li class="mb-2">
                            <i class="fas fa-info-circle text-info me-2"></i>
                            Поля со * обязательны для заполнения
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-lightbulb text-warning me-2"></i>
                            Описание для каждой сферы можно добавить позже
                        </li>
                        <li>
                            <i class="fas fa-image text-success me-2"></i>
                            Размер изображения должен быть около 300x300px
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Автоматическая подстановка описания по умолчанию
        document.getElementById('Rune_BaseDescription').addEventListener('input', function () {
            const textareas = document.querySelectorAll('textarea[id^="SphereDescriptions_"]');
            textareas.forEach(ta => {
                if (!ta.value) {
                    ta.value = this.value;
                }
            });
        });
    </script>
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Runes\CreateModel.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin.Runes
{
    public class CreateModel : PageModel
    {
        private readonly AppDbContext _context;

        public CreateModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Rune Rune { get; set; } = new Rune();

        [BindProperty]
        public Dictionary<int, string> SphereDescriptions { get; set; } = new();

        public List<Sphere> AllSpheres { get; set; }

        public async Task OnGetAsync()
        {
            AllSpheres = await _context.Spheres.ToListAsync();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                AllSpheres = await _context.Spheres.ToListAsync();
                return Page();
            }

            // Установка значений по умолчанию
            Rune.ImageUrl ??= "/images/default-rune.png";
            Rune.CreatedAt = DateTime.UtcNow;
            Rune.UpdatedAt = DateTime.UtcNow;

            _context.Runes.Add(Rune);
            await _context.SaveChangesAsync();

            // Добавление связей со сферами
            foreach (var sphere in await _context.Spheres.ToListAsync())
            {
                _context.RuneSphereDescriptions.Add(new RuneSphereDescription
                {
                    RuneId = Rune.Id,
                    SphereId = sphere.Id,
                    Description = "Нет описания" // или можно оставить пустым
                });
            }

            await _context.SaveChangesAsync();
            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Runes\Edit.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Runes.EditModel
@{
    ViewData["Title"] = "Редактирование руны";
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>

    <form method="post">
        <input type="hidden" asp-for="Rune.Id" />

        <div class="mb-3">
            <label asp-for="Rune.Name" class="form-label">Название *</label>
            <input asp-for="Rune.Name" class="form-control" required />
            <span asp-validation-for="Rune.Name" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Rune.BaseDescription" class="form-label">Основное описание *</label>
            <textarea asp-for="Rune.BaseDescription" class="form-control" rows="3" required></textarea>
            <span asp-validation-for="Rune.BaseDescription" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Rune.ImageUrl" class="form-label">Ссылка на изображение</label>
            <input asp-for="Rune.ImageUrl" class="form-control" />
            <small class="text-muted">Оставьте пустым для изображения по умолчанию</small>
        </div>

        <h4 class="mt-4">Описания для сфер:</h4>

        @foreach (var sphere in Model.AllSpheres)
        {
            <div class="card mb-3">
                <div class="card-header">
                    @sphere.Name
                </div>
                <div class="card-body">
                    <textarea name="SphereDescriptions[@sphere.Id]"
                              class="form-control"
                              rows="2">@Model.GetSphereDescription(sphere.Id)</textarea>
                </div>
            </div>
        }

        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
            <a asp-page="Index" class="btn btn-secondary me-md-2">Отмена</a>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Runes\Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin.Runes
{
    public class EditModel : PageModel
    {
        private readonly AppDbContext _context;

        public EditModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Rune Rune { get; set; }

        public List<Sphere> AllSpheres { get; set; }
        public Dictionary<int, string> SphereDescriptions { get; set; } = new();

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Rune = await _context.Runes
                .Include(r => r.SphereDescriptions)
                .FirstOrDefaultAsync(r => r.Id == id);

            if (Rune == null)
            {
                return NotFound();
            }

            AllSpheres = await _context.Spheres.ToListAsync();

            // Заполняем описания для сфер
            foreach (var sphere in AllSpheres)
            {
                var description = Rune.SphereDescriptions?
                    .FirstOrDefault(sd => sd.SphereId == sphere.Id)?
                    .Description ?? "Нет описания";
                SphereDescriptions[sphere.Id] = description;
            }

            return Page();
        }

        public string GetSphereDescription(int sphereId)
        {
            return SphereDescriptions.TryGetValue(sphereId, out var description)
                ? description
                : "Нет описания";
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                AllSpheres = await _context.Spheres.ToListAsync();
                return Page();
            }

            var existingRune = await _context.Runes
                .Include(r => r.SphereDescriptions)
                .FirstOrDefaultAsync(r => r.Id == Rune.Id);

            if (existingRune == null)
            {
                return NotFound();
            }

            // Обновляем основные свойства
            existingRune.Name = Rune.Name;
            existingRune.BaseDescription = Rune.BaseDescription;
            existingRune.ImageUrl = Rune.ImageUrl ?? "/images/default-rune.png";
            existingRune.UpdatedAt = DateTime.UtcNow;

            // Обновляем описания для сфер
            foreach (var description in existingRune.SphereDescriptions)
            {
                if (Request.Form.TryGetValue($"SphereDescriptions[{description.SphereId}]", out var newDescription))
                {
                    description.Description = newDescription;
                }
            }

            await _context.SaveChangesAsync();
            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Runes\Index.cshtml
@page
@using webb_tst_site3.Extensions
@model webb_tst_site3.Pages.Admin.Runes.IndexModel
@{
    ViewData["Title"] = "Список рун";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@ViewData["Title"]</h1>
        <a asp-page="Create" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Добавить руну
        </a>
    </div>

    @if (Model.Runes.Any())
    {
        <div class="mb-4">
            <button id="saveOrderBtn" class="btn btn-success mb-3">
                <i class="fas fa-save me-2"></i>Сохранить порядок
            </button>

            <div class="row" id="runesRow">
                @foreach (var rune in Model.Runes)
                {
                    <div class="col-md-4 mb-4 draggable-card" draggable="true" data-rune-id="@rune.Id">
                        <div class="card shadow-sm h-100">
                            <div class="card-img-top text-center p-3 bg-light">
                                <img src="@(rune.ImageUrl ?? "/images/default-rune.png")"
                                     class="img-fluid" style="max-height: 120px;"
                                     onerror="this.onerror=null;this.src='/images/default-rune.png'">
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@rune.Name</h5>
                                <p class="card-text text-muted small">@rune.BaseDescription.Truncate(100)</p>

                                @if (rune.SphereDescriptions.Any())
                                {
                                    <div class="mt-2">
                                        <h6 class="text-primary small">Описания по сферам:</h6>
                                        <ul class="list-unstyled small">
                                            @foreach (var desc in rune.SphereDescriptions)
                                            {
                                                <li>
                                                    <span class="fw-bold">@desc.Sphere.Name:</span>
                                                    <span>@desc.Description.Truncate(50)</span>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                            <div class="card-footer bg-white d-flex justify-content-between">
                                <a asp-page="./Edit" asp-route-id="@rune.Id" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-edit"></i> Изменить
                                </a>
                                <form method="post" asp-page-handler="Delete" asp-route-id="@rune.Id">
                                    <button type="submit" class="btn btn-sm btn-outline-danger"
                                            onclick="return confirm('Удалить эту руну?')">
                                        <i class="fas fa-trash"></i> Удалить
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            Нет доступных рун. Создайте первую руну.
        </div>
    }
</div>

@section Styles {
    <style>
        .draggable-card {
            cursor: grab;
            transition: transform 0.2s;
        }

            .draggable-card:active {
                cursor: grabbing;
                transform: scale(1.02);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            }

            .draggable-card.ghost {
                opacity: 0.5;
                border: 2px dashed #6c5ce7;
            }

        #saveOrderBtn {
            display: none;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const row = document.getElementById('runesRow');
            let draggedCard = null;
            let originalOrder = [];

            // Инициализация оригинального порядка
            function initializeOriginalOrder() {
                originalOrder = Array.from(row.children).map(card => parseInt(card.dataset.runeId));
            }
            initializeOriginalOrder();

            // Обработчики для drag-and-drop
            row.addEventListener('dragstart', e => {
                if (e.target.classList.contains('draggable-card')) {
                    draggedCard = e.target;
                    e.target.classList.add('ghost');
                    e.dataTransfer.effectAllowed = 'move';
                    e.dataTransfer.setData('text/html', e.target.innerHTML);
                }
            });

            row.addEventListener('dragend', e => {
                if (e.target.classList.contains('draggable-card')) {
                    e.target.classList.remove('ghost');
                    e.target.style.opacity = '1';
                    draggedCard = null;
                    checkOrderChanged();
                }
            });

            row.addEventListener('dragover', e => {
                e.preventDefault();
                if (!draggedCard) return;

                const afterElement = getDragAfterElement(row, e.clientY);
                if (afterElement == null) {
                    row.appendChild(draggedCard);
                } else {
                    row.insertBefore(draggedCard, afterElement);
                }
            });

            // Проверка изменений порядка
            function checkOrderChanged() {
                const currentOrder = Array.from(row.children).map(card => parseInt(card.dataset.runeId));
                const isChanged = !arraysEqual(originalOrder, currentOrder);
                document.getElementById('saveOrderBtn').style.display = isChanged ? 'block' : 'none';
            }

            // Сохранение порядка
            document.getElementById('saveOrderBtn').addEventListener('click', async () => {
                const runeIds = Array.from(row.children).map(card => parseInt(card.dataset.runeId));

                try {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const response = await fetch('/api/runes/order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(runeIds)
                    });

                    if (response.ok) {
                        alert('Порядок успешно сохранен!');
                        initializeOriginalOrder();
                        document.getElementById('saveOrderBtn').style.display = 'none';
                    } else {
                        alert('Ошибка при сохранении порядка');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Произошла ошибка');
                }
            });

            // Вспомогательные функции
            function getDragAfterElement(container, y) {
                const cards = [...container.querySelectorAll('.draggable-card:not(.ghost)')];

                return cards.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;

                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }

            function arraysEqual(a, b) {
                if (a.length !== b.length) return false;
                for (let i = 0; i < a.length; i++) {
                    if (a[i] !== b[i]) return false;
                }
                return true;
            }
        });
    </script>
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Runes\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin.Runes
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public List<Rune> Runes { get; set; }

        public async Task OnGetAsync()
        {
            Runes = await _context.Runes
                .Include(r => r.SphereDescriptions)
                .ThenInclude(sd => sd.Sphere)
                .OrderBy(r => r.Order)
                .ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Settings\Index.cshtml
@page
@model webb_tst_site3.Pages.Admin.Settings.IndexModel
@{
    ViewData["Title"] = "Настройки сайта";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@ViewData["Title"]</h1>
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="list-group">
                @foreach (var group in Model.SettingGroups)
                {
                    <a href="#group-@group.Id"
                       class="list-group-item list-group-item-action @(Model.ActiveGroupId == group.Id ? "active" : "")">
                        @group.Name
                    </a>
                }
            </div>
        </div>

        <div class="col-md-9">
            @foreach (var group in Model.SettingGroups)
            {
                <div id="group-@group.Id" class="mb-5 @(Model.ActiveGroupId != group.Id ? "d-none" : "")">
                    <h3>@group.Name</h3>
                    @if (!string.IsNullOrEmpty(group.Description))
                    {
                        <p class="text-muted">@group.Description</p>
                    }

                    <form method="post" asp-page-handler="UpdateGroup" asp-route-groupId="@group.Id">
                        <div class="card">
                            <div class="card-body">
                                @foreach (var setting in Model.Settings.Where(s => s.GroupId == group.Id).OrderBy(s => s.Order))
                                {
                                    <div class="mb-3">
                                        <label class="form-label">@setting.DisplayName</label>

                                        @if (setting.DataType == "color")
                                        {
                                            <input type="color"
                                                   name="Settings[@setting.Id].Value"
                                                   value="@setting.Value"
                                                   class="form-control form-control-color"
                                            @(setting.Editable ? "" : "disabled")>
                                        }
                                        else if (setting.DataType == "image")
                                        {
                                            <div class="input-group">
                                                <input type="text"
                                                       name="Settings[@setting.Id].Value"
                                                       value="@setting.Value"
                                                       class="form-control"
                                                @(setting.Editable ? "" : "disabled")>
                                                <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#imageModal" data-input-id="Settings[@setting.Id].Value">
                                                    <i class="fas fa-image"></i>
                                                </button>
                                            </div>
                                            @if (!string.IsNullOrEmpty(setting.Value))
                                            {
                                                <div class="mt-2">
                                                    <img src="@setting.Value" style="max-height: 100px;" class="img-thumbnail">
                                                </div>
                                            }
                                        }
                                        else if (setting.DataType == "boolean")
                                        {
                                            <div class="form-check form-switch">
                                                <input type="checkbox"
                                                       name="Settings[@setting.Id].Value"
                                                       value="true"
                                                       class="form-check-input"
                                                @(setting.Value == "true" ? "checked" : "")
                                                @(setting.Editable ? "" : "disabled")>
                                            </div>
                                        }
                                        else if (setting.DataType == "text" || setting.DataType == "html")
                                        {
                                            <textarea name="Settings[@setting.Id].Value"
                                                      class="form-control"
                                                      rows="3"
                                            @(setting.Editable ? "" : "disabled")>@setting.Value</textarea>
                                        }
                                        else
                                        {
                                            <input type="text"
                                                   name="Settings[@setting.Id].Value"
                                                   value="@setting.Value"
                                                   class="form-control"
                                            @(setting.Editable ? "" : "disabled")>
                                        }

                                        @if (!string.IsNullOrEmpty(setting.Description))
                                        {
                                            <small class="text-muted">@setting.Description</small>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="card-footer">
                                <button type="submit" class="btn btn-primary">Сохранить изменения</button>
                            </div>
                        </div>
                    </form>
                </div>
            }
        </div>
    </div>
</div>

<!-- Модальное окно для выбора изображений -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Выбор изображения</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">URL изображения</label>
                    <input type="text" id="imageUrlInput" class="form-control">
                </div>
                <div class="mb-3">
                    <label class="form-label">Загрузить новое изображение</label>
                    <input type="file" id="imageUpload" class="form-control" accept="image/*">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="selectImageBtn">Выбрать</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Обработка модального окна для изображений
        let currentInputId = '';
        $('#imageModal').on('show.bs.modal', function (event) {
            const button = $(event.relatedTarget);
            currentInputId = button.data('input-id');
            $('#imageUrlInput').val($(`input[name="${currentInputId}"]`).val());
        });

        $('#selectImageBtn').click(function () {
            $(`input[name="${currentInputId}"]`).val($('#imageUrlInput').val());
            $('#imageModal').modal('hide');
        });

        // Загрузка изображений
        $('#imageUpload').change(function (e) {
            const file = e.target.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('file', file);

            // Здесь должна быть реализация загрузки на сервер
            // После успешной загрузки:
            // $('#imageUrlInput').val(response.url);
        });
    </script>
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Settings\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Security.Claims;

namespace webb_tst_site3.Pages.Admin.Settings
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public List<SettingGroup> SettingGroups { get; set; }
        public List<SiteSetting> Settings { get; set; }
        public int ActiveGroupId { get; set; }

        public async Task OnGetAsync(int? groupId)
        {
            SettingGroups = await _context.SettingGroups
                .OrderBy(g => g.Order)
                .ToListAsync();

            Settings = await _context.SiteSettings
                .Include(s => s.Group)
                .OrderBy(s => s.Order)
                .ToListAsync();

            ActiveGroupId = groupId ?? SettingGroups.FirstOrDefault()?.Id ?? 0;
        }

        public async Task<IActionResult> OnPostUpdateGroupAsync(int groupId, Dictionary<int, SiteSetting> settings)
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            foreach (var setting in settings)
            {
                var dbSetting = await _context.SiteSettings.FindAsync(setting.Key);
                if (dbSetting != null && dbSetting.Editable)
                {
                    dbSetting.Value = setting.Value.Value;
                    dbSetting.UpdatedAt = DateTime.UtcNow;

                    // Запись в историю изменений
                    _context.SettingHistory.Add(new SettingHistory
                    {
                        SettingId = dbSetting.Id,
                        OldValue = dbSetting.Value,
                        NewValue = setting.Value.Value,
                        ChangedByUserId = User.FindFirstValue(ClaimTypes.NameIdentifier)
                    });
                }
            }

            await _context.SaveChangesAsync();
            return RedirectToPage(new { groupId });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Spheres\Create.cshtml
@page
@model webb_tst_site3.Pages.Admin.Spheres.CreateModel
@{
    ViewData["Title"] = "Добавление сферы";
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }

    <form method="post" class="mt-4">
        <div class="mb-3">
            <label asp-for="Sphere.Name" class="form-label">Название *</label>
            <input asp-for="Sphere.Name" class="form-control" required />
            <span asp-validation-for="Sphere.Name" class="text-danger"></span>
        </div>

        <!-- Для создания сферы (Pages/Admin/Spheres/Create.cshtml) -->
        <div class="mb-3">
            <label asp-for="Sphere.Description" class="form-label">Описание</label>
            <textarea asp-for="Sphere.Description" class="form-control" rows="3"></textarea>
        </div>

        <div class="mb-3">
            <label asp-for="Sphere.ImageUrl" class="form-label">Ссылка на изображение</label>
            <input asp-for="Sphere.ImageUrl" class="form-control" placeholder="https://example.com/sphere-image.jpg" />
            <small class="text-muted">Оставьте пустым для изображения по умолчанию</small>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <a asp-page="Index" class="btn btn-secondary me-md-2">Отмена</a>
            <button type="submit" class="btn btn-primary">Создать</button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Spheres\Create.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin.Spheres
{
    public class CreateModel : PageModel
    {
        private readonly AppDbContext _context;

        public CreateModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Sphere Sphere { get; set; }
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            // Установка значений по умолчанию
            Sphere.ImageUrl ??= "/images/default-sphere.png";
            Sphere.CreatedAt = DateTime.UtcNow;
            Sphere.UpdatedAt = DateTime.UtcNow;

            _context.Spheres.Add(Sphere);
            await _context.SaveChangesAsync();

            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Spheres\Edit.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Admin.Spheres.EditModel
@{
    ViewData["Title"] = "Редактирование сферы";
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>

    <form method="post">
        <input type="hidden" asp-for="Sphere.Id" />

        <div class="mb-3">
            <label asp-for="Sphere.Name" class="form-label">Название *</label>
            <input asp-for="Sphere.Name" class="form-control" required />
            <span asp-validation-for="Sphere.Name" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Sphere.Description" class="form-label">Описание</label>
            <textarea asp-for="Sphere.Description" class="form-control" rows="3"></textarea>
        </div>

        <div class="mb-3">
            <label asp-for="Sphere.ImageUrl" class="form-label">Ссылка на изображение</label>
            <input asp-for="Sphere.ImageUrl" class="form-control" />
            <small class="text-muted">Оставьте пустым для изображения по умолчанию</small>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <a asp-page="Index" class="btn btn-secondary me-md-2">Отмена</a>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </div>
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
            <a asp-page="Index" class="btn btn-secondary me-md-2">
                <i class="fas fa-arrow-left me-2"></i>Назад к списку
            </a>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Spheres\Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin.Spheres
{
    public class EditModel : PageModel
    {
        private readonly AppDbContext _context;

        public EditModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public Sphere Sphere { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Sphere = await _context.Spheres.FindAsync(id);
            if (Sphere == null)
            {
                return NotFound();
            }
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var existingSphere = await _context.Spheres.FindAsync(Sphere.Id);
            if (existingSphere == null)
            {
                return NotFound();
            }

            existingSphere.Name = Sphere.Name;
            existingSphere.Description = Sphere.Description;
            existingSphere.ImageUrl = Sphere.ImageUrl ?? "/images/default-sphere.png";
            existingSphere.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Spheres\Index.cshtml
@page
@model webb_tst_site3.Pages.Admin.Spheres.IndexModel
@{
    ViewData["Title"] = "Управление сферами";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@ViewData["Title"]</h1>
        <a asp-page="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Добавить сферу
        </a>
    </div>

    @if (Model.Spheres.Any())
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var sphere in Model.Spheres)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-img-top text-center p-3 bg-light">
                            <img src="@(sphere.ImageUrl ?? "/images/default-sphere.png")" 
                                 class="img-fluid" style="max-height: 150px;"
                                 onerror="this.onerror=null;this.src='/images/default-sphere.png'">
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@sphere.Name</h5>
                            @if (!string.IsNullOrEmpty(sphere.Description))
                            {
                                <p class="card-text text-muted">@sphere.Description</p>
                            }
                        </div>
                        <div class="card-footer bg-white">
                            <div class="d-flex justify-content-between">
                                <a asp-page="Edit" asp-route-id="@sphere.Id" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-edit"></i> Изменить
                                </a>
                                <form method="post" asp-page-handler="Delete" asp-route-id="@sphere.Id">
                                    <button type="submit" class="btn btn-sm btn-outline-danger">
                                        <i class="fas fa-trash"></i> Удалить
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            Нет доступных сфер. Создайте первую сферу.
        </div>
    }
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Spheres\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin.Spheres
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public IList<Sphere> Spheres { get; set; }

        public async Task OnGetAsync()
        {
            Spheres = await _context.Spheres
                .OrderBy(s => s.Name)
                .AsNoTracking()
                .ToListAsync();
        }

        public async Task<IActionResult> OnPostDeleteAsync(int id)
        {
            var sphere = await _context.Spheres.FindAsync(id);
            if (sphere != null)
            {
                _context.Spheres.Remove(sphere);
                await _context.SaveChangesAsync();
            }
            return RedirectToPage("./Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Index.cshtml
@page
@model webb_tst_site3.Pages.Admin.IndexModel
@{
    ViewData["Title"] = "Панель управления Fiend Magic";
}

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@ViewData["Title"]</h1>
        <form method="post" asp-page="/Admin/Logout" class="d-inline">
            <button type="submit" class="btn btn-danger">
                <i class="fas fa-sign-out-alt"></i> Выйти
            </button>
        </form>
    </div>

    <div class="alert alert-success">
        Добро пожаловать в панель управления, @User.Identity?.Name!
    </div>

    <div class="row mt-4">
        <!-- Секция рун -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Управление рунами</h5>
                </div>
                <div class="card-body">
                    <a asp-page="/Admin/Runes/Index" class="btn btn-success w-100 mb-3">
                        <i class="fas fa-list"></i> Все руны
                    </a>
                    <a asp-page="/Admin/Runes/Create" class="btn btn-primary w-100 mb-3">
                        <i class="fas fa-plus"></i> Добавить руну
                    </a>
                    <a asp-page="/Admin/Spheres/Index" class="btn btn-info w-100">
                        <i class="fas fa-globe"></i> Управление сферами
                    </a>

                </div>
            </div>
        </div>

        <!-- Секция квизов -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Управление квизами</h5>
                </div>
                <div class="card-body">
                    <a asp-page="/Admin/Quizzes/Index" class="btn btn-success w-100 mb-3">
                        <i class="fas fa-list"></i> Все квизы
                    </a>
                    <a asp-page="/Admin/Quizzes/Create" class="btn btn-primary w-100">
                        <i class="fas fa-plus"></i> Создать квиз
                    </a>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Настройки сайта</h5>
                </div>
                <div class="card-body">
                    <a asp-page="/Admin/Settings/Index" class="btn btn-info w-100">
                        <i class="fas fa-cog"></i> Управление настройками
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\IndexModel.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Admin
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public int RunesCount { get; set; }
        public int SpheresCount { get; set; }
        public int QuizzesCount { get; set; }

        public async Task OnGetAsync()
        {
            RunesCount = await _context.Runes.CountAsync();
            SpheresCount = await _context.Spheres.CountAsync();
            QuizzesCount = await _context.Quizzes.CountAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Login.cshtml
@page
@model webb_tst_site3.Pages.Admin.LoginModel

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="text-center">Вход администратора</h3>
                </div>
                <div class="card-body">
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                            {
                                <p>@error.ErrorMessage</p>
                            }
                        </div>
                    }

                    <form method="post">
                        <div class="mb-3">
                            <label asp-for="Input.Username" class="form-label">Имя пользователя</label>
                            <input asp-for="Input.Username" class="form-control" />
                            <span asp-validation-for="Input.Username" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Input.Password" class="form-label">Пароль</label>
                            <input asp-for="Input.Password" type="password" class="form-control" />
                            <span asp-validation-for="Input.Password" class="text-danger"></span>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Войти</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Login.cshtml.cs
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.ComponentModel.DataAnnotations;
using System.Security.Claims;
using webb_tst_site3.Data;
using System.Security.Cryptography;
using System.Text;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Admin
{
    public class LoginModel : PageModel
    {
        private readonly AppDbContext _context;

        public LoginModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public class InputModel
        {
            [Required(ErrorMessage = "Òðåáóåòñÿ èìÿ ïîëüçîâàòåëÿ")]
            public string Username { get; set; }

            [Required(ErrorMessage = "Òðåáóåòñÿ ïàðîëü")]
            [DataType(DataType.Password)]
            public string Password { get; set; }
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var user = await _context.Users.FirstOrDefaultAsync(u => u.Username == Input.Username);
            if (user == null || user.PasswordHash != HashPassword(Input.Password))
            {
                ModelState.AddModelError(string.Empty, "Íåâåðíûå ó÷åòíûå äàííûå");
                return Page();
            }

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Username),
                new Claim(ClaimTypes.Role, user.Role)
            };

            var claimsIdentity = new ClaimsIdentity(
                claims, CookieAuthenticationDefaults.AuthenticationScheme);

            await HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(claimsIdentity),
                new AuthenticationProperties
                {
                    IsPersistent = true,
                    ExpiresUtc = DateTimeOffset.UtcNow.AddHours(2)
                });

            return RedirectToPage("/Admin");
        }

        private string HashPassword(string password)
        {
            using var sha256 = SHA256.Create();
            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Admin\Logout.cshtml
@page
@model webb_tst_site3.Pages.Admin.LogoutModel
@{
    ViewData["Title"] = "Выход";
}

<div class="container text-center mt-5">
    <h2>Вы уверены, что хотите выйти?</h2>
    <form method="post">
        <button type="submit" class="btn btn-danger mt-3">Да, выйти</button>
    </form>
    <a asp-page="/Admin/Index" class="btn btn-secondary mt-3">Отмена</a>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Index.cshtml
@page
@model webb_tst_site3.Pages.Quiz.IndexModel
@{
    ViewData["Title"] = "Доступные тесты";
}

<div class="container">
    <h1 class="mb-4">@ViewData["Title"]</h1>

    <div class="list-group">
        @foreach (var quiz in Model.Quizzes)
        {
            <a asp-page="./Start" asp-route-id="@quiz.Id"
               class="list-group-item list-group-item-action">
                @quiz.Title
            </a>
        }
    </div>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Pages.Quiz
{
    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;

        public IndexModel(AppDbContext context)
        {
            _context = context;
        }

        public IList<Models.Quiz> Quizzes { get; set; }

        public async Task OnGetAsync()
        {
            Quizzes = await _context.Quizzes
                .ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Question.cshtml
@page
@model webb_tst_site3.Pages.Quiz.QuestionModel
@{
    ViewData["Title"] = $"Вопрос {Model.CurrentQuestionNumber}";
}

<div class="container">
    <div class="progress mb-4">
        <div class="progress-bar"
             style="width: @(Model.ProgressPercentage)%">
            @Model.CurrentQuestionNumber из @Model.TotalQuestions
        </div>
    </div>

    <form method="post">
        <input type="hidden" name="quizId" value="@Model.Question.QuizId" />
        <input type="hidden" name="questionId" value="@Model.Question.Id" />
        <input type="hidden" name="currentQuestionNumber" value="@Model.CurrentQuestionNumber" />

        <h3 class="mb-4">@Model.Question.Text</h3>

        <div class="list-group">
            @foreach (var answer in Model.Question.Answers)
            {
                <button type="submit"
                        name="answerId"
                        value="@answer.Id"
                        class="list-group-item list-group-item-action text-start">
                    @answer.Text
                </button>
            }
        </div>
    </form>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Question.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Quiz
{
    public class QuestionModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public QuestionModel(AppDbContext context, IHttpContextAccessor httpContextAccessor)
        {
            _context = context;
            _httpContextAccessor = httpContextAccessor;
        }

        public Question Question { get; set; }
        public int CurrentQuestionNumber { get; set; }
        public int TotalQuestions { get; set; }
        public int ProgressPercentage => (int)((double)CurrentQuestionNumber / TotalQuestions * 100);

        public async Task<IActionResult> OnGetAsync(int quizId, int questionNumber)
        {
            var quiz = await _context.Quizzes
                .Include(q => q.Questions)
                .FirstOrDefaultAsync(q => q.Id == quizId);

            if (quiz == null) return NotFound();

            TotalQuestions = quiz.Questions.Count;
            CurrentQuestionNumber = questionNumber;

            Question = await _context.Questions
                .Include(q => q.Answers)
                .Where(q => q.QuizId == quizId)
                .OrderBy(q => q.Order)
                .Skip(questionNumber - 1)
                .FirstOrDefaultAsync();

            if (Question == null)
            {
                return RedirectToPage("./Result", new { quizId });
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync(int quizId, int questionId, int answerId, int currentQuestionNumber)
        {
            var userId = _httpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                return Challenge();
            }

            var userAnswer = new UserQuizAnswer
            {
                UserId = userId,
                QuizId = quizId,
                QuestionId = questionId,
                AnswerId = answerId
            };

            _context.UserQuizAnswers.Add(userAnswer);
            await _context.SaveChangesAsync();

            var nextQuestionNumber = currentQuestionNumber + 1;
            var totalQuestions = await _context.Questions
                .CountAsync(q => q.QuizId == quizId);

            if (nextQuestionNumber > totalQuestions)
            {
                return RedirectToPage("./Result", new { quizId });
            }

            return RedirectToPage("./Question", new { quizId, questionNumber = nextQuestionNumber });
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Result.cshtml
@page
@model webb_tst_site3.Pages.Quiz.ResultModel
@{
    ViewData["Title"] = "Ваш результат";
}

<div class="container text-center">
    <h1>@Model.Result.Name</h1>

    @if (!string.IsNullOrEmpty(Model.Result.ImageUrl))
    {
        <img src="@Model.Result.ImageUrl" class="img-fluid my-4" style="max-height: 300px;">
    }

    <div class="result-description mt-4 text-start">
        @Html.Raw(Model.Result.Description)
    </div>

    <a asp-page="./Index" class="btn btn-primary mt-5">Вернуться к тестам</a>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Result.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages.Quiz
{
    public class ResultModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public ResultModel(AppDbContext context, IHttpContextAccessor httpContextAccessor)
        {
            _context = context;
            _httpContextAccessor = httpContextAccessor;
        }

        public Result Result { get; set; }

        public async Task<IActionResult> OnGetAsync(int quizId)
        {
            var userId = _httpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                return Challenge();
            }

            // Получаем все ответы пользователя для этого теста
            var userAnswers = await _context.UserQuizAnswers
                .Include(uqa => uqa.Answer)
                .Where(uqa => uqa.UserId == userId && uqa.QuizId == quizId)
                .ToListAsync();

            // Подсчитываем баллы для каждого возможного результата
            var resultScores = userAnswers
                .GroupBy(uqa => uqa.Answer.ResultId)
                .ToDictionary(g => g.Key, g => g.Sum(x => x.Answer.Score));

            // Находим результат с максимальным количеством баллов
            if (resultScores.Any())
            {
                var maxScore = resultScores.Values.Max();
                var winningResultId = resultScores.FirstOrDefault(x => x.Value == maxScore).Key;

                Result = await _context.Results
                    .FirstOrDefaultAsync(r => r.Id == winningResultId);
            }

            if (Result == null)
            {
                return NotFound();
            }

            return Page();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Start.cshtml
@page "{id:int}"
@model webb_tst_site3.Pages.Quiz.StartModel
@{
    ViewData["Title"] = Model.Quiz.Title;
}

<div class="container text-center">
    <h1>@Model.Quiz.Title</h1>
    <p class="lead">@Model.Quiz.Description</p>

    <a asp-page="./Question"
       asp-route-quizId="@Model.Quiz.Id"
       asp-route-questionNumber="1"
       class="btn btn-primary btn-lg">
        Начать тест
    </a>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\Start.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc;

namespace webb_tst_site3.Pages.Quiz
{
    public class StartModel : PageModel
    {
        private readonly AppDbContext _context;

        public StartModel(AppDbContext context)
        {
            _context = context;
        }

        public Models.Quiz Quiz { get; set; }

        public async Task<IActionResult> OnGetAsync(int id)
        {
            Quiz = await _context.Quizzes.FindAsync(id);

            if (Quiz == null)
            {
                return NotFound();
            }

            return Page();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Quiz\_ViewImports.cshtml
@using webb_tst_site3
@namespace webb_tst_site3.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, webb_tst_site3


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Shared\_Layout.cshtml
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@(ViewData["SiteName"] ?? "Fiend Magic") - @ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <style>
        :root {
            --primary-color: @ViewData["PrimaryColor"];
            --secondary-color: @ViewData["SecondaryColor"];
            --background-color: @ViewData["BackgroundColor"];
            --text-color: @ViewData["TextColor"];
        }
    </style>
    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="d-flex flex-column min-vh-100">
    <header>
        <nav class="navbar navbar-expand-sm navbar-dark mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-page="@(User.IsInRole("Admin") ? "/Admin/Index" : "/Home")">
                    @if (!string.IsNullOrEmpty(ViewData["LogoUrl"] as string))
                    {
                        <img src="@ViewData["LogoUrl"]" alt="@(ViewData["SiteName"] ?? "Fiend Magic")" height="40" class="me-2">
                    }
                    @(ViewData["SiteName"] ?? "Fiend Magic")
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-page="@(User.IsInRole("Admin") ? "/Admin/Index" : "/Home")">
                                <i class="fas fa-home"></i> Главная
                            </a>
                        </li>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-page="/Randomizer">
                                    <i class="fas fa-random"></i> Генератор рун
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" asp-page="/Quiz">
                                    <i class="fas fa-question-circle"></i> Квизы
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" asp-page="/Articles">
                                    <i class="fas fa-newspaper"></i> Статьи
                                </a>
                            </li>
                        }
                    </ul>
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>

    <div class="container flex-grow-1">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="footer mt-auto py-3">
        <div class="container text-center">
            &copy; @DateTime.Now.Year - @(ViewData["SiteName"] ?? "Fiend Magic")
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)

</body>
</html>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Shared\_LoginPartial.cshtml
﻿@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@{
    var isAuthenticated = User.Identity?.IsAuthenticated ?? false;
}

<ul class="navbar-nav">
    @if (isAuthenticated)
    {
        <li class="nav-item">
            <span class="nav-link">@User.Identity?.Name</span>
        </li>
        <li class="nav-item">
            <form method="post" asp-page="/Admin/Logout">
                <button type="submit" class="nav-link btn btn-link">Выйти</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link" asp-page="/Admin/Login">Вход</a>
        </li>
    }
</ul>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Shared\_LoginPartial.cshtml.cs
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace webb_tst_site3.Pages.Admin
{
    public class LogoutModel : PageModel
    {
        public async Task<IActionResult> OnPostAsync()
        {
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            return RedirectToPage("/Index");
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Shared\_ValidationScriptsPartial.cshtml
<environment include="Development">
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
</environment>
<environment exclude="Development">
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
</environment>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Articles.cshtml
@page
@model webb_tst_site3.Pages.ArticlesModel
@{
    ViewData["Title"] = "Статьи";
}

<div class="container">
    <h1 class="mb-4">@ViewData["Title"]</h1>

    <div class="row">
        @foreach (var article in Model.Articles)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100 shadow-sm">
                    @if (!string.IsNullOrEmpty(article.ImageUrl))
                    {
                        <img src="@article.ImageUrl" class="card-img-top" alt="@article.Title" style="height: 200px; object-fit: cover;">
                    }
                    <div class="card-body">
                        <h5 class="card-title">@article.Title</h5>
                        <p class="card-text">@article.Description</p>
                        @if (!string.IsNullOrEmpty(article.Hashtags))
                        {
                            <div class="mb-2">
                                @foreach (var tag in article.Hashtags.Split(' '))
                                {
                                    <span class="badge bg-secondary me-1">@tag</span>
                                }
                            </div>
                        }
                    </div>
                    <div class="card-footer bg-white border-0">
                        <a href="@article.Url" target="_blank" class="btn btn-primary w-100">
                            <i class="fas fa-external-link-alt me-2"></i>Читать
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Articles.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages
{
    public class ArticlesModel : PageModel
    {
        private readonly AppDbContext _context;

        public ArticlesModel(AppDbContext context)
        {
            _context = context;
        }

        public IList<Article> Articles { get; set; }

        public async Task OnGetAsync()
        {
            Articles = await _context.Articles
                .Where(a => a.ParentId == null)
                .OrderByDescending(a => a.CreatedAt)
                .ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Contact.cshtml
@page
@model webb_tst_site3.Pages.ContactModel
@{
    ViewData["Title"] = "Связь с разработчиком";
}

<form method="post">
    <div class="form-group">
        <label asp-for="Feedback.Name"></label>
        <input asp-for="Feedback.Name" class="form-control" required />
    </div>

    <div class="form-group">
        <label asp-for="Feedback.Email"></label>
        <input asp-for="Feedback.Email" type="email" class="form-control" required />
    </div>

    <div class="form-group">
        <label asp-for="Feedback.Message"></label>
        <textarea asp-for="Feedback.Message" class="form-control" rows="5" required></textarea>
    </div>

    <button type="submit" class="btn btn-primary">Отправить</button>
</form>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Contact.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using webb_tst_site3.Models;
using webb_tst_site3.Services;

namespace webb_tst_site3.Pages
{
    // Pages/Contact.cshtml.cs
    public class ContactModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly IEmailSender _emailSender;

        [BindProperty]
        public Feedback Feedback { get; set; }

        public ContactModel(AppDbContext context, IEmailSender emailSender)
        {
            _context = context;
            _emailSender = emailSender;
        }

        public void OnGet()
        {
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                //_context.Feedbacks.Add(Feedback);
                await _context.SaveChangesAsync();

                // Отправка email
                await _emailSender.SendEmailAsync(
                    "ваш-email@example.com",
                    $"Новое сообщение от {Feedback.Name}",
                    Feedback.Message);

                return RedirectToPage("ContactConfirmation");
            }
            return Page();
        }
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Home.cshtml
@page
@using webb_tst_site3.Pages
@model HomeModel
@{
    ViewData["Title"] = ViewData["SiteName"] ?? "Fiend Magic";
}

<div class="container">
    <h1 class="text-center mb-4">@ViewData["Title"]</h1>

    <div class="row">
        @if (!string.IsNullOrEmpty(Model.MainContent))
        {
            <div class="col-md-12">
                <div class="card mb-4">
                    <div class="card-body">
                        @Html.Raw(Model.MainContent)
                    </div>
                </div>
            </div>
        }

        @if (Model.ShowRandomizer)
        {
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <h3>Генератор рун</h3>
                        <p>Задайте вопрос и получите ответ от рун</p>
                        <a asp-page="/Randomizer" class="btn btn-primary mt-2">
                            <i class="fas fa-random me-2"></i>Перейти
                        </a>
                    </div>
                </div>
            </div>
        }

        @if (Model.ShowQuizzes)
        {
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <h3>Квизы и тесты</h3>
                        <p>Пройдите наши тесты и узнайте больше о себе</p>
                        <a asp-page="/Quiz" class="btn btn-primary mt-2">
                            <i class="fas fa-question-circle me-2"></i>Перейти
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Home.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Services;
using System.Threading.Tasks;

namespace webb_tst_site3.Pages
{
    public class HomeModel : PageModel
    {
        private readonly SettingsService _settingsService;

        public HomeModel(SettingsService settingsService)
        {
            _settingsService = settingsService;
        }

        public string MainContent { get; set; }
        public bool ShowRandomizer { get; set; } = true;
        public bool ShowQuizzes { get; set; } = true;

        public async Task OnGetAsync()
        {
            MainContent = await _settingsService.GetSettingAsync("HomePageContent");
            ShowRandomizer = (await _settingsService.GetSettingAsync("ShowRandomizer", "true")) == "true";
            ShowQuizzes = (await _settingsService.GetSettingAsync("ShowQuizzes", "true")) == "true";
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Index.cshtml
@page
@using webb_tst_site3.Pages
@model IndexModel
@{
    ViewData["Title"] = "Fiend Magic";
}

<div class="container text-center mt-5">
    <h1 class="display-4 mb-4">Добро пожаловать в Fiend Magic</h1>

    <div class="card shadow-sm mx-auto" style="max-width: 600px;">
        <div class="card-body">
            @if (!User.Identity.IsAuthenticated)
            {
                <h3 class="mb-4">Выберите роль:</h3>
                <div class="d-grid gap-3">
                    <a href="/Home" class="btn btn-primary btn-lg py-3">
                        <i class="fas fa-user me-2"></i>Пользователь
                    </a>
                    <a href="/Admin/Login" class="btn btn-outline-secondary btn-lg py-3">
                        <i class="fas fa-lock me-2"></i>Администратор
                    </a>
                </div>
            }
            else if (User.IsInRole("Admin"))
            {
                <div class="d-grid">
                    <a href="/Admin" class="btn btn-primary btn-lg py-3">
                        <i class="fas fa-tachometer-alt me-2"></i>Панель управления
                    </a>
                </div>
            }
            else
            {
                <div class="d-grid">
                    <a href="/Home" class="btn btn-primary btn-lg py-3">
                        <i class="fas fa-home me-2"></i>Главная страница
                    </a>
                </div>
            }
        </div>
    </div>
</div>


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Index.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace webb_tst_site3.Pages
{
    public class IndexModel : PageModel
    {
        private readonly ILogger<IndexModel> _logger;

        public IndexModel(ILogger<IndexModel> logger)
        {
            _logger = logger;
        }

        public IActionResult OnGet()
        {
            if (User.Identity.IsAuthenticated)
            {
                if (User.IsInRole("Admin"))
                {
                    return RedirectToPage("/Admin/Index");
                }
                else
                {
                    return RedirectToPage("/Home");
                }
            }
            return Page();
        }
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Randomizer.cshtml
@page
@model webb_tst_site3.Pages.RandomizerModel
@{
    ViewData["Title"] = "Генератор рун";
}

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4 mb-4">Генератор рун</h1>

        <div class="card shadow-sm mx-auto mb-4" style="max-width: 600px;">
            <div class="card-body">
                <h5 class="card-title">Задайте вопрос и выберите сферу</h5>
                <textarea id="questionInput" class="form-control mb-3" rows="3" placeholder="Введите ваш вопрос..."></textarea>

                <select id="sphereSelect" class="form-select mb-4">
                    <option value="">Все сферы</option>
                    @foreach (var sphere in Model.Spheres)
                    {
                        <option value="@sphere.Id">@sphere.Name</option>
                    }
                </select>

                <button id="generateBtn" class="btn btn-primary btn-lg w-100">
                    <i class="fas fa-random me-2"></i>Получить руну
                </button>
            </div>
        </div>

        <div id="loading" class="text-center my-4" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
            <p class="mt-2">Генерация руны...</p>
        </div>

        <div id="result" class="row justify-content-center"></div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('generateBtn').addEventListener('click', async function () {
            const btn = this;
            const question = document.getElementById('questionInput').value;
            const resultDiv = document.getElementById('result');
            const loadingDiv = document.getElementById('loading');
            const sphereId = document.getElementById('sphereSelect').value;

            if (!question) {
                alert('Пожалуйста, введите ваш вопрос');
                return;
            }

            btn.disabled = true;
            resultDiv.innerHTML = '';
            loadingDiv.style.display = 'block';

            try {
                const url = `/api/runes/random${sphereId ? `?sphereId=${sphereId}` : ''}`;
                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error('Ошибка при загрузке данных');
                }

                const data = await response.json();

                resultDiv.innerHTML = `
                                    <div class="col-md-8">
                                        <div class="card shadow mt-3">
                                            <div class="card-header bg-primary text-white">
                                                <h3 class="text-center">${data.name}</h3>
                                            </div>
                                            <div class="card-body text-center">
                                                <p class="text-muted mb-4">Ваш вопрос: "${question}"</p>
                                                <img src="${data.imageUrl}"
                                                     class="img-fluid my-3"
                                                     style="max-height: 200px;"
                                                     onerror="this.src='/images/default-rune.png'">
                                                <div class="card-text">${data.description.replace(/\n/g, '<br>')}</div>
                                                ${data.sphereName ? `<div class="text-muted mt-2">Сфера: ${data.sphereName}</div>` : ''}
                                            </div>
                                            <div class="card-footer text-center">
                                                <button id="generateAgainBtn" class="btn btn-primary">
                                                    <i class="fas fa-redo me-2"></i>Сгенерировать снова
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                `;

                document.getElementById('generateAgainBtn').addEventListener('click', function () {
                    btn.click();
                });
            } catch (error) {
                resultDiv.innerHTML = `
                                    <div class="col-md-8">
                                        <div class="alert alert-danger">
                                            Ошибка: ${error.message}
                                        </div>
                                        <button class="btn btn-warning w-100" onclick="window.location.reload()">
                                            <i class="fas fa-sync-alt me-2"></i>Попробовать снова
                                        </button>
                                    </div>
                                `;
            } finally {
                loadingDiv.style.display = 'none';
                btn.disabled = false;
            }
        });
    </script>
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\Randomizer.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using webb_tst_site3.Data;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Models;

namespace webb_tst_site3.Pages
{
    public class RandomizerModel : PageModel
    {
        private readonly AppDbContext _context;

        public RandomizerModel(AppDbContext context)
        {
            _context = context;
        }

        public List<Sphere> Spheres { get; set; }

        public async Task OnGetAsync()
        {
            Spheres = await _context.Spheres
                .OrderBy(s => s.Name)
                .AsNoTracking()
                .ToListAsync();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Pages\_ViewStart.cshtml
@{
    Layout = "_Layout";
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Services\AutService.cs
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using webb_tst_site3.Data;
using System.Security.Cryptography;
using System.Text;
using Microsoft.EntityFrameworkCore;

namespace webb_tst_site3.Services
{
    public class AuthService
    {
        private readonly AppDbContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public AuthService(AppDbContext context, IHttpContextAccessor httpContextAccessor)
        {
            _context = context;
            _httpContextAccessor = httpContextAccessor;
        }

        public async Task<bool> LoginAsync(string username, string password)
        {
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Username == username);
            if (user == null || user.PasswordHash != HashPassword(password))
                return false;

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Username),
                new Claim(ClaimTypes.Role, user.Role)
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            await _httpContextAccessor.HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                principal,
                new AuthenticationProperties
                {
                    IsPersistent = true,
                    ExpiresUtc = DateTime.UtcNow.AddMinutes(30)
                });

            return true;
        }

        public async Task LogoutAsync()
        {
            await _httpContextAccessor.HttpContext.SignOutAsync();
        }

        private string HashPassword(string password)
        {
            using var sha256 = SHA256.Create();
            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Services\EmailSender.cs
namespace webb_tst_site3.Services
{
    // Services/EmailSender.cs
    public interface IEmailSender
    {
        Task SendEmailAsync(string email, string subject, string message);
    }

    public class EmailSender : IEmailSender
    {
        public Task SendEmailAsync(string email, string subject, string message)
        {
            // Реализация отправки email через SMTP или другой сервис
            // Например, используя MailKit или SendGrid
            return Task.CompletedTask;
        }
    }
}



// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Services\SettingService.cs
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using webb_tst_site3.Data;
using webb_tst_site3.Models;

namespace webb_tst_site3.Services
{
    public class SettingsService
    {
        private readonly AppDbContext _context;
        private Dictionary<string, string> _settingsCache;
        private DateTime _lastCacheUpdate;

        public SettingsService(AppDbContext context)
        {
            _context = context;
            _settingsCache = new Dictionary<string, string>();
            _lastCacheUpdate = DateTime.MinValue;
        }
        public async Task<string> GetSiteNameAsync()
        {
            return await GetSettingAsync("SiteName", "Fiend Magic");
        }
        public async Task<string> GetSettingAsync(string name, string defaultValue = "")
        {
            await EnsureCacheIsUpToDate();

            if (_settingsCache.TryGetValue(name, out var value))
            {
                return value;
            }

            return defaultValue;
        }

        public async Task<Dictionary<string, string>> GetPublicSettingsAsync()
        {
            await EnsureCacheIsUpToDate();
            return _settingsCache.Where(s => s.Value != null).ToDictionary(s => s.Key, s => s.Value);
        }

        private async Task EnsureCacheIsUpToDate()
        {
            if ((DateTime.UtcNow - _lastCacheUpdate).TotalMinutes > 5)
            {
                var settings = await _context.SiteSettings
                    .Where(s => s.IsPublic)
                    .ToListAsync();

                _settingsCache = settings.ToDictionary(s => s.Name, s => s.Value);
                _lastCacheUpdate = DateTime.UtcNow;
            }
        }
        public async Task UpdateSettingAsync(string name, string value)
        {
            var setting = await _context.SiteSettings.FirstOrDefaultAsync(s => s.Name == name);
            if (setting != null && setting.Editable)
            {
                setting.Value = value;
                setting.UpdatedAt = DateTime.UtcNow;
                await _context.SaveChangesAsync();
                _lastCacheUpdate = DateTime.MinValue; // Сбрасываем кэш
            }
        }
    }
}


// Файл: C:\GitHub\RuneRandomizerWeb\webb_tst_site3\Program.cs
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.EntityFrameworkCore;
using webb_tst_site3.Data;
using webb_tst_site3.Services;

var builder = WebApplication.CreateBuilder(args);

// Добавляем сервисы
builder.Services.AddRazorPages();

// Настройка БД
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseMySql(
        builder.Configuration.GetConnectionString("DefaultConnection"),
        new MySqlServerVersion(new Version(8, 0, 23))));

// Настройка аутентификации (ОСОБОЕ ВНИМАНИЕ)
builder.Services.AddAuthentication(options => {
    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;
})
.AddCookie(options => {
    options.LoginPath = "/Admin/Login";
    options.AccessDeniedPath = "/Error";
    options.ExpireTimeSpan = TimeSpan.FromMinutes(30);
    options.SlidingExpiration = true;
    options.Cookie.HttpOnly = true;
    options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;

    // ВАЖНО: Отключаем автоматические редиректы
   /* options.Events = new CookieAuthenticationEvents
    {
        OnRedirectToLogin = context => {
            context.Response.StatusCode = StatusCodes.Status401Unauthorized;
            return Task.CompletedTask;
        }
    };*/
});

builder.Services.AddAuthorization();

// Регистрируем сервисы
builder.Services.AddScoped<SettingsService>();
builder.Services.AddHttpContextAccessor();

var app = builder.Build();

// Конфигурация middleware
app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

// ВАЖНО: Порядок middleware
app.UseAuthentication();
app.UseAuthorization();

app.MapRazorPages();

app.Run();


